357c832,835
<    o  Improved access and good performance on the Internet
---
>    o  Improved access and good performance on the Internet The protocol
>       is designed to transit firewalls easily, perform well where
>       latency is high and bandwidth is low, and scale to very large
>       numbers of clients per server.
359,365c837,838
<       The protocol is designed to transit firewalls easily, perform well
<       where latency is high and bandwidth is low, and scale to very
<       large numbers of clients per server.
< 
<    o  Strong security with negotiation built into the protocol
< 
<       The protocol builds on the work of the ONCRPC working group in
---
>    o  Strong security with negotiation built into the protocol The
>       protocol builds on the work of the ONCRPC working group in
371,380c844,851
<    o  Good cross-platform interoperability
< 
<       The protocol features a file system model that provides a useful,
<       common set of features that does not unduly favor one file system
<       or operating system over another.
< 
<    o  Designed for protocol extensions
< 
<       The protocol is designed to accept standard extensions within a
<       framework that enables and encourages backward compatibility.
---
>    o  Good cross-platform interoperability The protocol features a file
>       system model that provides a useful, common set of features that
>       does not unduly favor one file system or operating system over
>       another.
> 
>    o  Designed for protocol extensions The protocol is designed to
>       accept standard extensions within a framework that enables and
>       encourages backward compatibility.
419,421c890,893
<       entity that maintains a set of locks on behalf of one or more
<       applications.  This client is responsible for crash or failure
<       recovery for those locks it manages.
---
> 
>          entity that maintains a set of locks on behalf of one or more
>          applications.  This client is responsible for crash or failure
>          recovery for those locks it manages.
424,425c896,898
<       connection and multiple clients may exist on the same network
<       node.
---
> 
>          connection and multiple clients may exist on the same network
>          node.
487d959
<       server include:
489,491c961,965
<       1.  Media commit of data; that is, the modified data has been
<           successfully written to the disk media, for example, the disk
<           platter.
---
>          server include:
> 
>          1.  Media commit of data; that is, the modified data has been
>              successfully written to the disk media, for example, the
>              disk platter.
493,494c967,968
<       2.  An immediate reply disk drive with battery-backed, on-drive
<           intermediate storage or uninterruptible power system (UPS).
---
>          2.  An immediate reply disk drive with battery-backed, on-drive
>              intermediate storage or uninterruptible power system (UPS).
496,497c970,971
<       3.  Server commit of data with battery-backed intermediate storage
<           and recovery software.
---
>          3.  Server commit of data with battery-backed intermediate
>              storage and recovery software.
499,500c973,974
<       4.  Cache commit with uninterruptible power system (UPS) and
<           recovery software.
---
>          4.  Cache commit with uninterruptible power system (UPS) and
>              recovery software.
864,870c1338,1342
<       column descriptions:
<       1 == number of pseudo flavor
<       2 == name of pseudo flavor
<       3 == mechanism's OID
<       4 == RPCSEC_GSS service
<       5 == NFSv4.1 clients MUST support
<       6 == NFSv4.1 servers MUST support
---
>    column descriptions:
> 
>       1 == number of pseudo flavor 2 == name of pseudo flavor 3 ==
>       mechanism's OID 4 == RPCSEC_GSS service 5 == NFSv4.1 clients MUST
>       support 6 == NFSv4.1 servers MUST support
911,912c1383
<         service@hostname
<    For NFS, the "service" element is
---
>       service@hostname
914c1385,1387
<         nfs
---
>       For NFS, the "service" element is
> 
>       nfs
920c1393
<         nfs/hostname
---
>       nfs/hostname
1518a1992
> 
1526,1529c2000,2002
<    1.   Procedures are not added or deleted.
< 
<         To maintain the general RPC model, NFSv4 minor versions will not
<         add to or delete procedures from the NFS program.
---
>    1.   Procedures are not added or deleted.  To maintain the general
>         RPC model, NFSv4 minor versions will not add to or delete
>         procedures from the NFS program.
1535d2007
<         procedures does not affect the RPC model.
1537,1550c2009,2028
<         *  Minor versions may append attributes to the bitmap4 that
<            represents sets of attributes and to the fattr4 that
<            represents sets of attribute values.
< 
<            This allows for the expansion of the attribute model to allow
<            for future growth or adaptation.
< 
<         *  Minor version X must append any new attributes after the last
<            documented attribute.
< 
<            Since attribute results are specified as an opaque array of
<            per-attribute, XDR-encoded results, the complexity of adding
<            new attributes in the midst of the current definitions would
<            be too burdensome.
---
>            procedures does not affect the RPC model.
> 
>            +  Minor versions may append attributes to the bitmap4 that
>               represents sets of attributes and to the fattr4 that
>               represents sets of attribute values.
> 
>               This allows for the expansion of the attribute model to
>               allow
> 
>                  for future growth or adaptation.
> 
>            +  Minor version X must append any new attributes after the
>               last documented attribute.
> 
>               Since attribute results are specified as an opaque array
>               of
> 
>                  per-attribute, XDR-encoded results, the complexity of
>                  adding new attributes in the midst of the current
>                  definitions would be too burdensome.
1556,1558c2034,2037
<         for a single operation is too burdensome.  New operations should
<         be added instead of modifying existing structures for a minor
<         version.
---
> 
>            for a single operation is too burdensome.  New operations
>            should be added instead of modifying existing structures for
>            a minor version.
1561d2039
<         version:
1563,1573c2041,2054
<         *  adding bits to flag fields, such as new attributes to
<            GETATTR's bitmap4 data type, and providing corresponding
<            variants of opaque arrays, such as a notify4 used together
<            with such bitmaps
< 
<         *  adding bits to existing attributes like ACLs that have flag
<            words
< 
<         *  extending enumerated types (including NFS4ERR_*) with new
<            values
<         *  adding cases to a switched union
---
>            version:
> 
>            +  adding bits to flag fields, such as new attributes to
>               GETATTR's bitmap4 data type, and providing corresponding
>               variants of opaque arrays, such as a notify4 used together
>               with such bitmaps
> 
>            +  adding bits to existing attributes like ACLs that have
>               flag words
> 
>            +  extending enumerated types (including NFS4ERR_*) with new
>               values
> 
>            +  adding cases to a switched union
1578,1581c2059,2061
<    5.   Minor versions must not delete operations.
< 
<         This prevents the potential reuse of a particular operation
<         "slot" in a future minor version.
---
>    5.   Minor versions must not delete operations.  This prevents the
>         potential reuse of a particular operation "slot" in a future
>         minor version.
1588d2067
< 
1616,1620c2095,2100
<         forces the use of implementation experience before designating a
<         feature as REQUIRED.  On the other hand, some classes of
<         features are infrastructural and have broad effects.  Allowing
<         infrastructural features to be RECOMMENDED or OPTIONAL
<         complicates implementation of the minor version.
---
> 
>            forces the use of implementation experience before
>            designating a feature as REQUIRED.  On the other hand, some
>            classes of features are infrastructural and have broad
>            effects.  Allowing infrastructural features to be RECOMMENDED
>            or OPTIONAL complicates implementation of the minor version.
1889d2368
< 
2136a2616
> 
2150,2153c2630,2634
<       it is not required to do so.  It can invoke CREATE_SESSION on the
<       connection.  This will result in client ID trunking as described
<       below.  It can also decide to drop the connection if it does not
<       choose to use trunking.
---
> 
>          it is not required to do so.  It can invoke CREATE_SESSION on
>          the connection.  This will result in client ID trunking as
>          described below.  It can also decide to drop the connection if
>          it does not choose to use trunking.
2155a2637
> 
2165,2169c2647,2653
<       CREATE_SESSION on each connection, using the same client ID that
<       was returned in eir_clientid.  These invocations create two
<       sessions and also associate each connection with its respective
<       session.  The client is free to decline to use client ID trunking
<       by simply dropping the connection at this point.
---
> 
>          CREATE_SESSION on each connection, using the same client ID
>          that was returned in eir_clientid.  These invocations create
>          two sessions and also associate each connection with its
>          respective session.  The client is free to decline to use
>          client ID trunking by simply dropping the connection at this
>          point.
2172,2173c2656,2658
<       sessions associated with that same client ID.  This requires the
<       server to coordinate state across sessions.
---
> 
>          sessions associated with that same client ID.  This requires
>          the server to coordinate state across sessions.
2204,2209c2689,2695
<       BIND_CONN_TO_SESSION operation, see Section 18.34), if the client
<       specified SP4_SSV state protection for the BIND_CONN_TO_SESSION
<       operation, the client MUST send the BIND_CONN_TO_SESSION with
<       RPCSEC_GSS protection, using integrity or privacy, and an
<       RPCSEC_GSS handle created with the GSS SSV mechanism
<       (Section 2.10.9).
---
> 
>          BIND_CONN_TO_SESSION operation, see Section 18.34), if the
>          client specified SP4_SSV state protection for the
>          BIND_CONN_TO_SESSION operation, the client MUST send the
>          BIND_CONN_TO_SESSION with RPCSEC_GSS protection, using
>          integrity or privacy, and an RPCSEC_GSS handle created with the
>          GSS SSV mechanism (Section 2.10.9).
2212,2219c2698,2706
<       session of a wrong server, the server will either reject the
<       attempt because it is not aware of the session identifier of the
<       BIND_CONN_TO_SESSION arguments, or it will reject the attempt
<       because the RPCSEC_GSS authentication fails.  Even if the server
<       mistakenly or maliciously accepts the connection association
<       attempt, the RPCSEC_GSS verifier it computes in the response will
<       not be verified by the client, so the client will know it cannot
<       use the connection for trunking the specified session.
---
>          session of a wrong server, the server will either reject the
>          attempt because it is not aware of the session identifier of
>          the BIND_CONN_TO_SESSION arguments, or it will reject the
>          attempt because the RPCSEC_GSS authentication fails.  Even if
>          the server mistakenly or maliciously accepts the connection
>          association attempt, the RPCSEC_GSS verifier it computes in the
>          response will not be verified by the client, so the client will
>          know it cannot use the connection for trunking the specified
>          session.
2222,2226c2709,2714
<       BIND_CONN_TO_SESSION operation will use RPCSEC_GSS integrity or
<       privacy, using the same credential that was used when the client
<       ID was created.  Mutual authentication via RPCSEC_GSS assures the
<       client that the connection is associated with the correct session
<       of the correct server.
---
> 
>          BIND_CONN_TO_SESSION operation will use RPCSEC_GSS integrity or
>          privacy, using the same credential that was used when the
>          client ID was created.  Mutual authentication via RPCSEC_GSS
>          assures the client that the connection is associated with the
>          correct session of the correct server.
2240,2254c2728,2744
<       When the client sends EXCHANGE_ID, it specifies SP4_SSV
<       protection.  The first EXCHANGE_ID the client sends always has to
<       be confirmed by a CREATE_SESSION call.  The client then sends
<       SET_SSV.  Later, the client sends EXCHANGE_ID to a second
<       destination network address different from the one the first
<       EXCHANGE_ID was sent to.  The client checks that each EXCHANGE_ID
<       reply has the same eir_clientid, eir_server_owner.so_major_id, and
<       eir_server_scope.  If so, the client verifies the claim by sending
<       a CREATE_SESSION operation to the second destination address,
<       protected with RPCSEC_GSS integrity using an RPCSEC_GSS handle
<       returned by the second EXCHANGE_ID.  If the server accepts the
<       CREATE_SESSION request, and if the client verifies the RPCSEC_GSS
<       verifier and integrity codes, then the client has proof the second
<       server knows the SSV, and thus the two servers are cooperating for
<       the purposes of specifying server scope and client ID trunking.
---
> 
>          When the client sends EXCHANGE_ID, it specifies SP4_SSV
>          protection.  The first EXCHANGE_ID the client sends always has
>          to be confirmed by a CREATE_SESSION call.  The client then
>          sends SET_SSV.  Later, the client sends EXCHANGE_ID to a second
>          destination network address different from the one the first
>          EXCHANGE_ID was sent to.  The client checks that each
>          EXCHANGE_ID reply has the same eir_clientid,
>          eir_server_owner.so_major_id, and eir_server_scope.  If so, the
>          client verifies the claim by sending a CREATE_SESSION operation
>          to the second destination address, protected with RPCSEC_GSS
>          integrity using an RPCSEC_GSS handle returned by the second
>          EXCHANGE_ID.  If the server accepts the CREATE_SESSION request,
>          and if the client verifies the RPCSEC_GSS verifier and
>          integrity codes, then the client has proof the second server
>          knows the SSV, and thus the two servers are cooperating for the
>          purposes of specifying server scope and client ID trunking.
2490,2504c2980,2996
<       highest_slotid argument to a Sequence operation, i.e. the
<       requester continues to ignore the target highest_slotid in the
<       response to a Sequence operation, and continues to set its
<       highest_slotid argument to be higher than the target
<       highest_slotid.  This can be considered particularly egregious
<       behavior when the replier knows there are no outstanding requests
<       with slot IDs higher than its target highest_slotid.  When faced
<       with such intransigence, the replier is free to take more forceful
<       action, and MAY reply with a new enforced highest_slotid that is
<       less than its previous enforced highest_slotid.  Thereafter, if
<       the requester continues to send requests with a highest_slotid
<       that is greater than the replier's new enforced highest_slotid,
<       the server MAY return NFS4ERR_BAD_HIGH_SLOT, unless the slot ID in
<       the request is greater than the new enforced highest_slotid and
<       the request is a retry.
---
> 
>          highest_slotid argument to a Sequence operation, i.e. the
>          requester continues to ignore the target highest_slotid in the
>          response to a Sequence operation, and continues to set its
>          highest_slotid argument to be higher than the target
>          highest_slotid.  This can be considered particularly egregious
>          behavior when the replier knows there are no outstanding
>          requests with slot IDs higher than its target highest_slotid.
>          When faced with such intransigence, the replier is free to take
>          more forceful action, and MAY reply with a new enforced
>          highest_slotid that is less than its previous enforced
>          highest_slotid.  Thereafter, if the requester continues to send
>          requests with a highest_slotid that is greater than the
>          replier's new enforced highest_slotid, the server MAY return
>          NFS4ERR_BAD_HIGH_SLOT, unless the slot ID in the request is
>          greater than the new enforced highest_slotid and the request is
>          a retry.
2507,2508c2999,3001
<       requester sends a request with a highest_slotid less than or equal
<       to the replier's new enforced highest_slotid.
---
> 
>          requester sends a request with a highest_slotid less than or
>          equal to the replier's new enforced highest_slotid.
2511,2521c3004,3016
<       non-retry requests that have a slot ID that exceeds the replier's
<       highest_slotid.  Once the replier has forcibly lowered the
<       enforced highest_slotid, the requester is only allowed to send
<       retries on slots that exceed the replier's highest_slotid.  If a
<       request is received with a slot ID that is higher than the new
<       enforced highest_slotid, and the sequence ID is one higher than
<       what is in the slot's reply cache, then the server can both retire
<       the slot and return NFS4ERR_BADSLOT (however, the server MUST NOT
<       do one and not the other).  The reason it is safe to retire the
<       slot is because by using the next sequence ID, the requester is
<       indicating it has received the previous reply for the slot.
---
> 
>          non-retry requests that have a slot ID that exceeds the
>          replier's highest_slotid.  Once the replier has forcibly
>          lowered the enforced highest_slotid, the requester is only
>          allowed to send retries on slots that exceed the replier's
>          highest_slotid.  If a request is received with a slot ID that
>          is higher than the new enforced highest_slotid, and the
>          sequence ID is one higher than what is in the slot's reply
>          cache, then the server can both retire the slot and return
>          NFS4ERR_BADSLOT (however, the server MUST NOT do one and not
>          the other).  The reason it is safe to retire the slot is
>          because by using the next sequence ID, the requester is
>          indicating it has received the previous reply for the slot.
3261,3263c3756,3759
<       use, and establish a new SSV for the client ID.  The client will
<       be unable to delete the old client ID, and will let the lease on
<       the old client ID expire.
---
> 
>          use, and establish a new SSV for the client ID.  The client
>          will be unable to delete the old client ID, and will let the
>          lease on the old client ID expire.
3266,3270c3762,3767
<       using Bob's RPCSEC_GSS context, Eve can use the new session via
<       the legitimate client, but she cannot disrupt Bob.  Moreover,
<       because the client SHOULD have modified the SSV due to Eve using
<       the new session, Bob cannot get revenge on Eve by associating a
<       rogue connection with the session.
---
> 
>          using Bob's RPCSEC_GSS context, Eve can use the new session via
>          the legitimate client, but she cannot disrupt Bob.  Moreover,
>          because the client SHOULD have modified the SSV due to Eve
>          using the new session, Bob cannot get revenge on Eve by
>          associating a rogue connection with the session.
3273,3299c3770,3798
<       hijacked the old session?  When the client detects that a new
<       principal, Bob, wants to use the session, it SHOULD have sent a
<       SET_SSV, which leads to the following sub-scenarios:
< 
<       *  Let us suppose that from the rogue connection, Eve sent a
<          SET_SSV with the same slot ID and sequence ID that the
<          legitimate client later uses.  The server will assume the
<          SET_SSV sent with Bob's credentials is a retry, and return to
<          the legitimate client the reply it sent Eve.  However, unless
<          Eve can correctly guess the SSV the legitimate client will use,
<          the digest verification checks in the SET_SSV response will
<          fail.  That is an indication to the client that the session has
<          apparently been hijacked.
< 
<       *  Alternatively, Eve sent a SET_SSV with a different slot ID than
<          the legitimate client uses for its SET_SSV.  Then the digest
<          verification of the SET_SSV sent with Bob's credentials fails
<          on the server, and the error returned to the client makes it
<          apparent that the session has been hijacked.
< 
<       *  Alternatively, Eve sent an operation other than SET_SSV, but
<          with the same slot ID and sequence that the legitimate client
<          uses for its SET_SSV.  The server returns to the legitimate
<          client the response it sent Eve.  The client sees that the
<          response is not at all what it expects.  The client assumes
<          either session hijacking or a server bug, and either way
<          destroys the old session.
---
> 
>          hijacked the old session?  When the client detects that a new
>          principal, Bob, wants to use the session, it SHOULD have sent a
>          SET_SSV, which leads to the following sub-scenarios:
> 
>          +  Let us suppose that from the rogue connection, Eve sent a
>             SET_SSV with the same slot ID and sequence ID that the
>             legitimate client later uses.  The server will assume the
>             SET_SSV sent with Bob's credentials is a retry, and return
>             to the legitimate client the reply it sent Eve.  However,
>             unless Eve can correctly guess the SSV the legitimate client
>             will use, the digest verification checks in the SET_SSV
>             response will fail.  That is an indication to the client
>             that the session has apparently been hijacked.
> 
>          +  Alternatively, Eve sent a SET_SSV with a different slot ID
>             than the legitimate client uses for its SET_SSV.  Then the
>             digest verification of the SET_SSV sent with Bob's
>             credentials fails on the server, and the error returned to
>             the client makes it apparent that the session has been
>             hijacked.
> 
>          +  Alternatively, Eve sent an operation other than SET_SSV, but
>             with the same slot ID and sequence that the legitimate
>             client uses for its SET_SSV.  The server returns to the
>             legitimate client the response it sent Eve.  The client sees
>             that the response is not at all what it expects.  The client
>             assumes either session hijacking or a server bug, and either
>             way destroys the old session.
3373,3377c3872,3876
<    enum ssv_subkey4 {
<            SSV4_SUBKEY_MIC_I2T     = 1,
<            SSV4_SUBKEY_MIC_T2I     = 2,
<            SSV4_SUBKEY_SEAL_I2T    = 3,
<            SSV4_SUBKEY_SEAL_T2I    = 4
---
> 
>            enum ssv_subkey4 { SSV4_SUBKEY_MIC_I2T = 1,
>            SSV4_SUBKEY_MIC_T2I = 2, SSV4_SUBKEY_SEAL_I2T = 3,
>            SSV4_SUBKEY_SEAL_T2I = 4
> 
3393,3395c3892,3895
<    struct ssv_mic_plain_tkn4 {
<      uint32_t        smpt_ssv_seq;
<      opaque          smpt_orig_plain<>;
---
> 
>      struct ssv_mic_plain_tkn4 { uint32_t smpt_ssv_seq; opaque
>      smpt_orig_plain<>;
> 
3399,3401c3899,3901
<    struct ssv_mic_tkn4 {
<      uint32_t        smt_ssv_seq;
<      opaque          smt_hmac<>;
---
> 
>      struct ssv_mic_tkn4 { uint32_t smt_ssv_seq; opaque smt_hmac<>;
> 
3435,3439c3935,3938
<    struct ssv_seal_plain_tkn4 {
<      opaque          sspt_confounder<>;
<      uint32_t        sspt_ssv_seq;
<      opaque          sspt_orig_plain<>;
<      opaque          sspt_pad<>;
---
> 
>      struct ssv_seal_plain_tkn4 { opaque sspt_confounder<>; uint32_t
>      sspt_ssv_seq; opaque sspt_orig_plain<>; opaque sspt_pad<>;
> 
3443,3447c3942,3945
<    struct ssv_seal_cipher_tkn4 {
<      uint32_t      ssct_ssv_seq;
<      opaque        ssct_iv<>;
<      opaque        ssct_encr_data<>;
<      opaque        ssct_hmac<>;
---
> 
>      struct ssv_seal_cipher_tkn4 { uint32_t ssct_ssv_seq; opaque
>      ssct_iv<>; opaque ssct_encr_data<>; opaque ssct_hmac<>;
> 
3960,3968c4458,4463
<    const NFS4_FHSIZE               = 128;
<    const NFS4_VERIFIER_SIZE        = 8;
<    const NFS4_OPAQUE_LIMIT         = 1024;
<    const NFS4_SESSIONID_SIZE       = 16;
< 
<    const NFS4_INT64_MAX            = 0x7fffffffffffffff;
<    const NFS4_UINT64_MAX           = 0xffffffffffffffff;
<    const NFS4_INT32_MAX            = 0x7fffffff;
<    const NFS4_UINT32_MAX           = 0xffffffff;
---
>    const NFS4_FHSIZE  = 128; const NFS4_VERIFIER_SIZE = 8; const
>       NFS4_OPAQUE_LIMIT = 1024; const NFS4_SESSIONID_SIZE = 16;
> 
>    const NFS4_INT64_MAX  = 0x7fffffffffffffff; const NFS4_UINT64_MAX =
>       0xffffffffffffffff; const NFS4_INT32_MAX = 0x7fffffff; const
>       NFS4_UINT32_MAX = 0xffffffff;
3970,3971c4465,4466
<    const NFS4_MAXFILELEN           = 0xffffffffffffffff;
<    const NFS4_MAXFILEOFF           = 0xfffffffffffffffe;
---
>    const NFS4_MAXFILELEN  = 0xffffffffffffffff; const NFS4_MAXFILEOFF =
>       0xfffffffffffffffe;
4002,4073c4497,4569
<    +---------------+---------------------------------------------------+
<    | Data Type     | Definition                                        |
<    +---------------+---------------------------------------------------+
<    | int32_t       | typedef int int32_t;                              |
<    | uint32_t      | typedef unsigned int uint32_t;                    |
<    | int64_t       | typedef hyper int64_t;                            |
<    | uint64_t      | typedef unsigned hyper uint64_t;                  |
<    | attrlist4     | typedef opaque attrlist4<>;                       |
<    |               | Used for file/directory attributes.               |
<    | bitmap4       | typedef uint32_t bitmap4<>;                       |
<    |               | Used in attribute array encoding.                 |
<    | changeid4     | typedef uint64_t changeid4;                       |
<    |               | Used in the definition of change_info4.           |
<    | clientid4     | typedef uint64_t clientid4;                       |
<    |               | Shorthand reference to client identification.     |
<    | count4        | typedef uint32_t count4;                          |
<    |               | Various count parameters (READ, WRITE, COMMIT).   |
<    | length4       | typedef uint64_t length4;                         |
<    |               | The length of a byte-range within a file.         |
<    | mode4         | typedef uint32_t mode4;                           |
<    |               | Mode attribute data type.                         |
<    | nfs_cookie4   | typedef uint64_t nfs_cookie4;                     |
<    |               | Opaque cookie value for READDIR.                  |
<    | nfs_fh4       | typedef opaque nfs_fh4<NFS4_FHSIZE>;              |
<    |               | Filehandle definition.                            |
<    | nfs_ftype4    | enum nfs_ftype4;                                  |
<    |               | Various defined file types.                       |
<    | nfsstat4      | enum nfsstat4;                                    |
<    |               | Return value for operations.                      |
<    | offset4       | typedef uint64_t offset4;                         |
<    |               | Various offset designations (READ, WRITE, LOCK,   |
<    |               | COMMIT).                                          |
<    | qop4          | typedef uint32_t qop4;                            |
<    |               | Quality of protection designation in SECINFO.     |
<    | sec_oid4      | typedef opaque sec_oid4<>;                        |
<    |               | Security Object Identifier.  The sec_oid4 data    |
<    |               | type is not really opaque.  Instead, it contains  |
<    |               | an ASN.1 OBJECT IDENTIFIER as used by GSS-API in  |
<    |               | the mech_type argument to GSS_Init_sec_context.   |
<    |               | See [7] for details.                              |
<    | sequenceid4   | typedef uint32_t sequenceid4;                     |
<    |               | Sequence number used for various session          |
<    |               | operations (EXCHANGE_ID, CREATE_SESSION,          |
<    |               | SEQUENCE, CB_SEQUENCE).                           |
<    | seqid4        | typedef uint32_t seqid4;                          |
<    |               | Sequence identifier used for locking.             |
<    | sessionid4    | typedef opaque sessionid4[NFS4_SESSIONID_SIZE];   |
<    |               | Session identifier.                               |
<    | slotid4       | typedef uint32_t slotid4;                         |
<    |               | Sequencing artifact for various session           |
<    |               | operations (SEQUENCE, CB_SEQUENCE).               |
<    | utf8string    | typedef opaque utf8string<>;                      |
<    |               | UTF-8 encoding for strings.                       |
<    | utf8str_cis   | typedef utf8string utf8str_cis;                   |
<    |               | Case-insensitive UTF-8 string.                    |
<    | utf8str_cs    | typedef utf8string utf8str_cs;                    |
<    |               | Case-sensitive UTF-8 string.                      |
<    | utf8str_mixed | typedef utf8string utf8str_mixed;                 |
<    |               | UTF-8 strings with a case-sensitive prefix and a  |
<    |               | case-insensitive suffix.                          |
<    | component4    | typedef utf8str_cs component4;                    |
<    |               | Represents pathname components.                   |
<    | linktext4     | typedef utf8str_cs linktext4;                     |
<    |               | Symbolic link contents ("symbolic link" is        |
<    |               | defined in an Open Group [14] standard).          |
<    | pathname4     | typedef component4 pathname4<>;                   |
<    |               | Represents pathname for fs_locations.             |
<    | verifier4     | typedef opaque verifier4[NFS4_VERIFIER_SIZE];     |
<    |               | Verifier used for various operations (COMMIT,     |
<    |               | CREATE, EXCHANGE_ID, OPEN, READDIR, WRITE)        |
<    |               | NFS4_VERIFIER_SIZE is defined as 8.               |
<    +---------------+---------------------------------------------------+
---
>    +---------------+--------------------------------------------------+
>    | Data Type     | Definition                                       |
>    +---------------+--------------------------------------------------+
>    | int32_t       | typedef int int32_t;                             |
>    | uint32_t      | typedef unsigned int uint32_t;                   |
>    | int64_t       | typedef hyper int64_t;                           |
>    | uint64_t      | typedef unsigned hyper uint64_t;                 |
>    | attrlist4     | typedef opaque attrlist4<>;                      |
>    |               | Used for file/directory attributes.              |
>    | bitmap4       | typedef uint32_t bitmap4<>;                      |
>    |               | Used in attribute array encoding.                |
>    | changeid4     | typedef uint64_t changeid4;                      |
>    |               | Used in the definition of change_info4.          |
>    | clientid4     | typedef uint64_t clientid4;                      |
>    |               | Shorthand reference to client identification.    |
>    | count4        | typedef uint32_t count4;                         |
>    |               | Various count parameters (READ, WRITE, COMMIT).  |
>    | length4       | typedef uint64_t length4;                        |
>    |               | The length of a byte-range within a file.        |
>    | mode4         | typedef uint32_t mode4;                          |
>    |               | Mode attribute data type.                        |
>    | nfs_cookie4   | typedef uint64_t nfs_cookie4;                    |
>    |               | Opaque cookie value for READDIR.                 |
>    | nfs_fh4       | typedef opaque nfs_fh4<NFS4_FHSIZE>;             |
>    |               | Filehandle definition.                           |
>    | nfs_ftype4    | enum nfs_ftype4;                                 |
>    |               | Various defined file types.                      |
>    | nfsstat4      | enum nfsstat4;                                   |
>    |               | Return value for operations.                     |
>    | offset4       | typedef uint64_t offset4;                        |
>    |               | Various offset designations (READ, WRITE, LOCK,  |
>    |               | COMMIT).                                         |
>    | qop4          | typedef uint32_t qop4;                           |
>    |               | Quality of protection designation in SECINFO.    |
>    | sec_oid4      | typedef opaque sec_oid4<>;                       |
>    |               | Security Object Identifier.  The sec_oid4 data   |
>    |               | type is not really opaque.  Instead, it contains |
>    |               | an ASN.1 OBJECT IDENTIFIER as used by GSS-API in |
>    |               | the mech_type argument to GSS_Init_sec_context.  |
>    |               | See [7] for details.                             |
>    | sequenceid4   | typedef uint32_t sequenceid4;                    |
>    |               | Sequence number used for various session         |
>    |               | operations (EXCHANGE_ID, CREATE_SESSION,         |
>    |               | SEQUENCE, CB_SEQUENCE).                          |
>    | seqid4        | typedef uint32_t seqid4;                         |
>    |               | Sequence identifier used for locking.            |
>    | sessionid4    | typedef opaque sessionid4[NFS4_SESSIONID_SIZE];  |
>    |               | Session identifier.                              |
>    | slotid4       | typedef uint32_t slotid4;                        |
>    |               | Sequencing artifact for various session          |
>    |               | operations (SEQUENCE, CB_SEQUENCE).              |
>    | utf8string    | typedef opaque utf8string<>;                     |
>    |               | UTF-8 encoding for strings.                      |
>    | utf8str_cis   | typedef utf8string utf8str_cis;                  |
>    |               | Case-insensitive UTF-8 string.                   |
>    | utf8str_cs    | typedef utf8string utf8str_cs;                   |
>    |               | Case-sensitive UTF-8 string.                     |
>    | utf8str_mixed | typedef utf8string utf8str_mixed;                |
>    |               | UTF-8 strings with a case-sensitive prefix and a |
>    |               | case-insensitive suffix.                         |
>    | component4    | typedef utf8str_cs component4;                   |
>    |               | Represents pathname components.                  |
>    | linktext4     | typedef utf8str_cs linktext4;                    |
>    |               | Symbolic link contents ("symbolic link" is       |
>    |               | defined in an Open Group [14] standard).         |
>    | pathname4     | typedef component4 pathname4<>;                  |
>    |               | Represents pathname for fs_locations.            |
>    | verifier4     | typedef opaque verifier4[NFS4_VERIFIER_SIZE];    |
>    |               | Verifier used for various operations (COMMIT,    |
>    |               | CREATE, EXCHANGE_ID, OPEN, READDIR, WRITE)       |
>    |               | NFS4_VERIFIER_SIZE is defined as 8.              |
>    |               |                                                  |
>    +---------------+--------------------------------------------------+
4092a4589
> 
4214,4215c4711
<    typedef state_owner4 open_owner4;
<    typedef state_owner4 lock_owner4;
---
>    typedef state_owner4 open_owner4; typedef state_owner4 lock_owner4;
4436,4462c4932,4967
<    +-------------------------+---+---------+---------------------------+
<    | name                    | # | Data    | Description               |
<    |                         |   | Type    |                           |
<    +-------------------------+---+---------+---------------------------+
<    | threshold4_read_size    | 0 | length4 | If a file's length is     |
<    |                         |   |         | less than the value of    |
<    |                         |   |         | threshold4_read_size,     |
<    |                         |   |         | then it is RECOMMENDED    |
<    |                         |   |         | that the client read from |
<    |                         |   |         | the file via the MDS and  |
<    |                         |   |         | not a storage device.     |
<    | threshold4_write_size   | 1 | length4 | If a file's length is     |
<    |                         |   |         | less than the value of    |
<    |                         |   |         | threshold4_write_size,    |
<    |                         |   |         | then it is RECOMMENDED    |
<    |                         |   |         | that the client write to  |
<    |                         |   |         | the file via the MDS and  |
<    |                         |   |         | not a storage device.     |
<    | threshold4_read_iosize  | 2 | length4 | For read I/O sizes below  |
<    |                         |   |         | this threshold, it is     |
<    |                         |   |         | RECOMMENDED to read data  |
<    |                         |   |         | through the MDS.          |
<    | threshold4_write_iosize | 3 | length4 | For write I/O sizes below |
<    |                         |   |         | this threshold, it is     |
<    |                         |   |         | RECOMMENDED to write data |
<    |                         |   |         | through the MDS.          |
<    +-------------------------+---+---------+---------------------------+
---
>    +-------------------------+----+----------+-------------------------+
>    | name                    | #  | Data     | Description             |
>    |                         |    | Type     |                         |
>    +-------------------------+----+----------+-------------------------+
>    | threshold4_read_size    | 0  | length4  | If a file's length is   |
>    |                         |    |          | less than the value of  |
>    |                         |    |          | threshold4_read_size,   |
>    |                         |    |          | then it is RECOMMENDED  |
>    |                         |    |          | that the client read    |
>    |                         |    |          | from                    |
>    |                         |    |          | the file via the MDS    |
>    |                         |    |          | and                     |
>    |                         |    |          | not a storage device.   |
>    | threshold4_write_size   | 1  | length4  | If a file's length is   |
>    |                         |    |          | less than the value of  |
>    |                         |    |          | threshold4_write_size,  |
>    |                         |    |          | then it is RECOMMENDED  |
>    |                         |    |          | that the client write   |
>    |                         |    |          | to                      |
>    |                         |    |          | the file via the MDS    |
>    |                         |    |          | and                     |
>    |                         |    |          | not a storage device.   |
>    | threshold4_read_iosize  | 2  | length4  | For read I/O sizes      |
>    |                         |    |          | below                   |
>    |                         |    |          | this threshold, it is   |
>    |                         |    |          | RECOMMENDED to read     |
>    |                         |    |          | data                    |
>    |                         |    |          | through the MDS.        |
>    | threshold4_write_iosize | 3  | length4  | For write I/O sizes     |
>    |                         |    |          | below                   |
>    |                         |    |          | this threshold, it is   |
>    |                         |    |          | RECOMMENDED to write    |
>    |                         |    |          | data                    |
>    |                         |    |          | through the MDS.        |
>    |                         |    |          |                         |
>    +-------------------------+----+----------+-------------------------+
4669,4670c5174,5175
<    [volatile bit = 1 | server boot time | slot | generation number]
<    o  slot is an index in the server volatile filehandle table
---
>    [volatile bit = 1 | server boot time | slot | generation number] o
>    slot is an index in the server volatile filehandle table
4717,4719c5222,5224
<              RENAME A B
<              LOOKUP B
<              GETFH
---
>    RENAME A B
> 
>       LOOKUP B GETFH
4758,4764c5263,5270
<         +----------+-----------+---------------------------------+
<         | LOOKUP   | "foo"     | ; look up file                  |
<         | GETATTR  | attrbits  |                                 |
<         | OPENATTR |           | ; access foo's named attributes |
<         | LOOKUP   | "x11icon" | ; look up specific attribute    |
<         | READ     | 0,4096    | ; read stream of bytes          |
<         +----------+-----------+---------------------------------+
---
>    +---------------+--------------+------------------------------------+
>    | LOOKUP        | "foo"        | ; look up file  ; access foo's     |
>    | GETATTR       | attrbits     | named attributes ; look up         |
>    | OPENATTR      | "x11icon"    | specific attribute ; read stream   |
>    | LOOKUP READ   | 0,4096       | of bytes                           |
>    +---------------+--------------+------------------------------------+
>    |               |              |                                    |
>    +---------------+--------------+------------------------------------+
4905c5411,5412
<    o  The per-server attribute is:
---
>    o  The per-server attribute is: lease_time o The per-file system
>       attributes are:
4907,4908c5414
<          lease_time
<    o  The per-file system attributes are:
---
>       supported_attrs, suppattr_exclcreat, fh_expire_type,
4910d5415
<          supported_attrs, suppattr_exclcreat, fh_expire_type,
4919,4929c5424,5432
<    o  The per-file system object attributes are:
< 
<          type, change, size, named_attr, fsid, rdattr_error, filehandle,
<          acl, archive, fileid, hidden, maxlink, mimetype, mode,
<          numlinks, owner, owner_group, rawdev, space_used, system,
<          time_access, time_backup, time_create, time_metadata,
<          time_modify, mounted_on_fileid, dir_notif_delay,
<          dirent_notif_delay, dacl, sacl, layout_type, layout_hint,
<          layout_blksize, layout_alignment, mdsthreshold, retention_get,
<          retention_set, retentevt_get, retentevt_set, retention_hold,
<          mode_set_masked
---
>    o  The per-file system object attributes are: type, change, size,
>       named_attr, fsid, rdattr_error, filehandle, acl, archive, fileid,
>       hidden, maxlink, mimetype, mode, numlinks, owner, owner_group,
>       rawdev, space_used, system, time_access, time_backup, time_create,
>       time_metadata, time_modify, mounted_on_fileid, dir_notif_delay,
>       dirent_notif_delay, dacl, sacl, layout_type, layout_hint,
>       layout_blksize, layout_alignment, mdsthreshold, retention_get,
>       retention_set, retentevt_get, retentevt_set, retention_hold,
>       mode_set_masked
4981a5485
>      |                    |    |            |     |                  |
5019c5523
<    | layout_hint        | 63 | layouthint4    |   W | Section 5.12.4   |
---
>    | layout_hint        | 63 | layouthint4    | W   | Section 5.12.4   |
5029c5533
<    | mode_set_masked    | 74 | mode_masked4   |   W | Section 6.2.5    |
---
>    | mode_set_masked    | 74 | mode_masked4   | W   | Section 6.2.5    |
5040c5544
<    | retentevt_set      | 72 | retention_set4 |   W | Section 5.13.4   |
---
>    | retentevt_set      | 72 | retention_set4 | W   | Section 5.13.4   |
5043c5547
<    | retention_set      | 70 | retention_set4 |   W | Section 5.13.2   |
---
>    | retention_set      | 70 | retention_set4 | W   | Section 5.13.2   |
5051c5555
<    | time_access_set    | 48 | settime4       |   W | Section 5.8.2.38 |
---
>    | time_access_set    | 48 | settime4       | W   | Section 5.8.2.38 |
5057c5561,5562
<    | time_modify_set    | 54 | settime4       |   W | Section 5.8.2.44 |
---
>    | time_modify_set    | 54 | settime4       | W   | Section 5.8.2.44 |
>    |                    |    |                |     |                  |
5720,5723c6225,6228
<    const RET4_DURATION_INFINITE    = 0xffffffffffffffff;
<    struct retention_get4 {
<            uint64_t        rg_duration;
<            nfstime4        rg_begin_time<1>;
---
>    const RET4_DURATION_INFINITE  = 0xffffffffffffffff; struct
>            retention_get4 { uint64_t rg_duration; nfstime4
>            rg_begin_time<1>;
> 
5903c6408
<    typedef uint32_t        acetype4;
---
>    typedef uint32_t  acetype4;
5970,5973c6475,6478
<    const ACE4_ACCESS_ALLOWED_ACE_TYPE      = 0x00000000;
<    const ACE4_ACCESS_DENIED_ACE_TYPE       = 0x00000001;
<    const ACE4_SYSTEM_AUDIT_ACE_TYPE        = 0x00000002;
<    const ACE4_SYSTEM_ALARM_ACE_TYPE        = 0x00000003;
---
>    const ACE4_ACCESS_ALLOWED_ACE_TYPE  = 0x00000000; const
>       ACE4_ACCESS_DENIED_ACE_TYPE = 0x00000001; const
>       ACE4_SYSTEM_AUDIT_ACE_TYPE = 0x00000002; const
>       ACE4_SYSTEM_ALARM_ACE_TYPE = 0x00000003;
5979,6009c6484,6515
<    +------------------------------+--------------+---------------------+
<    | Value                        | Abbreviation | Description         |
<    +------------------------------+--------------+---------------------+
<    | ACE4_ACCESS_ALLOWED_ACE_TYPE | ALLOW        | Explicitly grants   |
<    |                              |              | the access defined  |
<    |                              |              | in acemask4 to the  |
<    |                              |              | file or directory.  |
<    | ACE4_ACCESS_DENIED_ACE_TYPE  | DENY         | Explicitly denies   |
<    |                              |              | the access defined  |
<    |                              |              | in acemask4 to the  |
<    |                              |              | file or directory.  |
<    | ACE4_SYSTEM_AUDIT_ACE_TYPE   | AUDIT        | Log (in a           |
<    |                              |              | system-dependent    |
<    |                              |              | way) any access     |
<    |                              |              | attempt to a file   |
<    |                              |              | or directory that   |
<    |                              |              | uses any of the     |
<    |                              |              | access methods      |
<    |                              |              | specified in        |
<    |                              |              | acemask4.           |
<    | ACE4_SYSTEM_ALARM_ACE_TYPE   | ALARM        | Generate an alarm   |
<    |                              |              | (in a               |
<    |                              |              | system-dependent    |
<    |                              |              | way) when any       |
<    |                              |              | access attempt is   |
<    |                              |              | made to a file or   |
<    |                              |              | directory for the   |
<    |                              |              | access methods      |
<    |                              |              | specified in        |
<    |                              |              | acemask4.           |
<    +------------------------------+--------------+---------------------+
---
>    +------------------------------+--------------+--------------------+
>    | Value                        | Abbreviation | Description        |
>    +------------------------------+--------------+--------------------+
>    | ACE4_ACCESS_ALLOWED_ACE_TYPE | ALLOW        | Explicitly grants  |
>    |                              |              | the access defined |
>    |                              |              | in acemask4 to the |
>    |                              |              | file or directory. |
>    | ACE4_ACCESS_DENIED_ACE_TYPE  | DENY         | Explicitly denies  |
>    |                              |              | the access defined |
>    |                              |              | in acemask4 to the |
>    |                              |              | file or directory. |
>    | ACE4_SYSTEM_AUDIT_ACE_TYPE   | AUDIT        | Log (in a          |
>    |                              |              | system-dependent   |
>    |                              |              | way) any access    |
>    |                              |              | attempt to a file  |
>    |                              |              | or directory that  |
>    |                              |              | uses any of the    |
>    |                              |              | access methods     |
>    |                              |              | specified in       |
>    |                              |              | acemask4.          |
>    | ACE4_SYSTEM_ALARM_ACE_TYPE   | ALARM        | Generate an alarm  |
>    |                              |              | (in a              |
>    |                              |              | system-dependent   |
>    |                              |              | way) when any      |
>    |                              |              | access attempt is  |
>    |                              |              | made to a file or  |
>    |                              |              | directory for the  |
>    |                              |              | access methods     |
>    |                              |              | specified in       |
>    |                              |              | acemask4.          |
>    |                              |              |                    |
>    +------------------------------+--------------+--------------------+
6021,6026c6527,6531
<    const ACL4_SUPPORT_ALLOW_ACL    = 0x00000001;
<    const ACL4_SUPPORT_DENY_ACL     = 0x00000002;
<    const ACL4_SUPPORT_AUDIT_ACL    = 0x00000004;
<    const ACL4_SUPPORT_ALARM_ACL    = 0x00000008;
<    Servers that support either the ALLOW or DENY ACE type SHOULD support
<    both ALLOW and DENY ACE types.
---
>    const ACL4_SUPPORT_ALLOW_ACL  = 0x00000001; const
>       ACL4_SUPPORT_DENY_ACL = 0x00000002; const ACL4_SUPPORT_AUDIT_ACL =
>       0x00000004; const ACL4_SUPPORT_ALARM_ACL = 0x00000008; Servers
>       that support either the ALLOW or DENY ACE type SHOULD support both
>       ALLOW and DENY ACE types.
6047,6066c6552,6565
<    const ACE4_READ_DATA            = 0x00000001;
<    const ACE4_LIST_DIRECTORY       = 0x00000001;
<    const ACE4_WRITE_DATA           = 0x00000002;
<    const ACE4_ADD_FILE             = 0x00000002;
<    const ACE4_APPEND_DATA          = 0x00000004;
<    const ACE4_ADD_SUBDIRECTORY     = 0x00000004;
<    const ACE4_READ_NAMED_ATTRS     = 0x00000008;
<    const ACE4_WRITE_NAMED_ATTRS    = 0x00000010;
<    const ACE4_EXECUTE              = 0x00000020;
<    const ACE4_DELETE_CHILD         = 0x00000040;
<    const ACE4_READ_ATTRIBUTES      = 0x00000080;
<    const ACE4_WRITE_ATTRIBUTES     = 0x00000100;
<    const ACE4_WRITE_RETENTION      = 0x00000200;
<    const ACE4_WRITE_RETENTION_HOLD = 0x00000400;
< 
<    const ACE4_DELETE               = 0x00010000;
<    const ACE4_READ_ACL             = 0x00020000;
<    const ACE4_WRITE_ACL            = 0x00040000;
<    const ACE4_WRITE_OWNER          = 0x00080000;
<    const ACE4_SYNCHRONIZE          = 0x00100000;
---
>    const ACE4_READ_DATA  = 0x00000001; const ACE4_LIST_DIRECTORY =
>       0x00000001; const ACE4_WRITE_DATA = 0x00000002; const
>       ACE4_ADD_FILE = 0x00000002; const ACE4_APPEND_DATA = 0x00000004;
>       const ACE4_ADD_SUBDIRECTORY = 0x00000004; const
>       ACE4_READ_NAMED_ATTRS = 0x00000008; const ACE4_WRITE_NAMED_ATTRS =
>       0x00000010; const ACE4_EXECUTE = 0x00000020; const
>       ACE4_DELETE_CHILD = 0x00000040; const ACE4_READ_ATTRIBUTES =
>       0x00000080; const ACE4_WRITE_ATTRIBUTES = 0x00000100; const
>       ACE4_WRITE_RETENTION = 0x00000200; const ACE4_WRITE_RETENTION_HOLD
>       = 0x00000400;
> 
>    const ACE4_DELETE  = 0x00010000; const ACE4_READ_ACL = 0x00020000;
>       const ACE4_WRITE_ACL = 0x00040000; const ACE4_WRITE_OWNER =
>       0x00080000; const ACE4_SYNCHRONIZE = 0x00100000;
6082d6580
< 
6085c6583
<       Discussion:
---
>          Discussion:
6112c6610
<       Discussion:
---
>          Discussion:
6116a6615
> 
6124d6622
< 
6127c6625
<       Discussion:
---
>          Discussion:
6146c6644
<       Discussion:
---
>          Discussion:
6161,6162c6659,6661
<          RENAME
<       Discussion:
---
>       RENAME
> 
>          Discussion:
6188c6687
<       Discussion:
---
>          Discussion:
6209,6210c6708
<          RENAME
<          LINK
---
>          RENAME LINK
6213,6214c6711
< 
<       Discussion:
---
>          Discussion:
6256,6257c6753,6754
<          REMOVE
<          RENAME
---
>          REMOVE RENAME
>          Discussion:
6259,6263c6756,6758
<       Discussion:
< 
<          Permission to delete a file or directory within a directory.
<          See Section 6.2.1.3.2 for information on ACE4_DELETE and
<          ACE4_DELETE_CHILD interact.
---
>             Permission to delete a file or directory within a directory.
>             See Section 6.2.1.3.2 for information on ACE4_DELETE and
>             ACE4_DELETE_CHILD interact.
6277c6772
<       Discussion:
---
>          Discussion:
6294c6789
<       Discussion:
---
>          Discussion:
6303d6797
< 
6308c6802
<       Discussion:
---
>          Discussion:
6321c6815
<       Discussion:
---
>          Discussion:
6333c6827
<       Discussion:
---
>          Discussion:
6345a6840
>       VERIFY
6347,6348c6842
<          VERIFY
<       Discussion:
---
>          Discussion:
6368c6862
<       Discussion:
---
>          Discussion:
6380c6874
<       Discussion:
---
>          Discussion:
6452,6459c6946,6953
<    const ACE4_FILE_INHERIT_ACE             = 0x00000001;
<    const ACE4_DIRECTORY_INHERIT_ACE        = 0x00000002;
<    const ACE4_NO_PROPAGATE_INHERIT_ACE     = 0x00000004;
<    const ACE4_INHERIT_ONLY_ACE             = 0x00000008;
<    const ACE4_SUCCESSFUL_ACCESS_ACE_FLAG   = 0x00000010;
<    const ACE4_FAILED_ACCESS_ACE_FLAG       = 0x00000020;
<    const ACE4_IDENTIFIER_GROUP             = 0x00000040;
<    const ACE4_INHERITED_ACE                = 0x00000080;
---
>    const ACE4_FILE_INHERIT_ACE  = 0x00000001; const
>       ACE4_DIRECTORY_INHERIT_ACE = 0x00000002; const
>       ACE4_NO_PROPAGATE_INHERIT_ACE = 0x00000004; const
>       ACE4_INHERIT_ONLY_ACE = 0x00000008; const
>       ACE4_SUCCESSFUL_ACCESS_ACE_FLAG = 0x00000010; const
>       ACE4_FAILED_ACCESS_ACE_FLAG = 0x00000020; const
>       ACE4_IDENTIFIER_GROUP = 0x00000040; const ACE4_INHERITED_ACE =
>       0x00000080;
6478a6973
> 
6482a6978
> 
6484,6487c6980,6983
<       added to each new directory created.
<       If this flag is set in an ACE in an ACL attribute to be set on a
<       non-directory file system object, the operation attempting to set
<       the ACL SHOULD fail with NFS4ERR_ATTRNOTSUPP.
---
>       added to each new directory created.  If this flag is set in an
>       ACE in an ACL attribute to be set on a non-directory file system
>       object, the operation attempting to set the ACL SHOULD fail with
>       NFS4ERR_ATTRNOTSUPP.
6489a6986
> 
6494a6992
> 
6504,6506c7002,7005
<       ACE4_DIRECTORY_INHERIT_ACE nor ACE4_FILE_INHERIT_ACE is present,
<       then an operation attempting to set such an attribute SHOULD fail
<       with NFS4ERR_ATTRNOTSUPP.
---
> 
>          ACE4_DIRECTORY_INHERIT_ACE nor ACE4_FILE_INHERIT_ACE is
>          present, then an operation attempting to set such an attribute
>          SHOULD fail with NFS4ERR_ATTRNOTSUPP.
6510a7010
> 
6529,6531c7029,7032
<       even when they return NFS4_OK.  For the purposes of AUDIT and
<       ALARM, we consider an ACCESS operation to be a "failure" if it
<       fails to return a bit that was requested and supported.
---
> 
>          even when they return NFS4_OK.  For the purposes of AUDIT and
>          ALARM, we consider an ACCESS operation to be a "failure" if it
>          fails to return a bit that was requested and supported.
6533a7035
> 
6540a7043
> 
6575a7079
>    |               |                                                  |
6612,6623c7116,7126
<    const MODE4_SUID = 0x800;  /* set user id on execution */
<    const MODE4_SGID = 0x400;  /* set group id on execution */
<    const MODE4_SVTX = 0x200;  /* save text even after use */
<    const MODE4_RUSR = 0x100;  /* read permission: owner */
<    const MODE4_WUSR = 0x080;  /* write permission: owner */
<    const MODE4_XUSR = 0x040;  /* execute permission: owner */
<    const MODE4_RGRP = 0x020;  /* read permission: group */
<    const MODE4_WGRP = 0x010;  /* write permission: group */
<    const MODE4_XGRP = 0x008;  /* execute permission: group */
<    const MODE4_ROTH = 0x004;  /* read permission: other */
<    const MODE4_WOTH = 0x002;  /* write permission: other */
<    const MODE4_XOTH = 0x001;  /* execute permission: other */
---
>    const MODE4_SUID = 0x800;  /* set user id on execution */ const
>       MODE4_SGID = 0x400; /* set group id on execution */ const
>       MODE4_SVTX = 0x200; /* save text even after use */ const
>       MODE4_RUSR = 0x100; /* read permission: owner */ const MODE4_WUSR
>       = 0x080; /* write permission: owner */ const MODE4_XUSR = 0x040;
>       /* execute permission: owner */ const MODE4_RGRP = 0x020; /* read
>       permission: group */ const MODE4_WGRP = 0x010; /* write
>       permission: group */ const MODE4_XGRP = 0x008; /* execute
>       permission: group */ const MODE4_ROTH = 0x004; /* read permission:
>       other */ const MODE4_WOTH = 0x002; /* write permission: other */
>       const MODE4_XOTH = 0x001; /* execute permission: other */
6896,6925c7399,7423
<    1.  If just the mode is given in the call:
< 
<        In this case, inheritance SHOULD take place, but the mode MUST be
<        applied to the inherited ACL as described in Section 6.4.1.1,
<        thereby modifying the ACL.
< 
<    2.  If just the ACL is given in the call:
< 
<        In this case, inheritance SHOULD NOT take place, and the ACL as
<        defined in the CREATE or OPEN will be set without modification,
<        and the mode modified as in Section 6.4.1.2.
< 
<    3.  If both mode and ACL are given in the call:
< 
<        In this case, inheritance SHOULD NOT take place, and both
<        attributes will be set as described in Section 6.4.1.3.
< 
<    4.  If neither mode nor ACL is given in the call:
< 
<        In the case where an object is being created without any initial
<        attributes at all, e.g., an OPEN operation with an opentype4 of
<        OPEN4_CREATE and a createmode4 of EXCLUSIVE4, inheritance SHOULD
<        NOT take place (note that EXCLUSIVE4_1 is a better choice of
<        createmode4, since it does permit initial attributes).  Instead,
<        the server SHOULD set permissions to deny all access to the newly
<        created object.  It is expected that the appropriate client will
<        set the desired attributes in a subsequent SETATTR operation, and
<        the server SHOULD allow that operation to succeed, regardless of
<        what permissions the object is created with.  For example, an
<        empty ACL denies all permissions, but the server should allow the
---
>    1.  If just the mode is given in the call: In this case, inheritance
>        SHOULD take place, but the mode MUST be applied to the inherited
>        ACL as described in Section 6.4.1.1, thereby modifying the ACL.
> 
>    2.  If just the ACL is given in the call: In this case, inheritance
>        SHOULD NOT take place, and the ACL as defined in the CREATE or
>        OPEN will be set without modification, and the mode modified as
>        in Section 6.4.1.2.
> 
>    3.  If both mode and ACL are given in the call: In this case,
>        inheritance SHOULD NOT take place, and both attributes will be
>        set as described in Section 6.4.1.3.
> 
>    4.  If neither mode nor ACL is given in the call: In the case where
>        an object is being created without any initial attributes at all,
>        e.g., an OPEN operation with an opentype4 of OPEN4_CREATE and a
>        createmode4 of EXCLUSIVE4, inheritance SHOULD NOT take place
>        (note that EXCLUSIVE4_1 is a better choice of createmode4, since
>        it does permit initial attributes).  Instead, the server SHOULD
>        set permissions to deny all access to the newly created object.
>        It is expected that the appropriate client will set the desired
>        attributes in a subsequent SETATTR operation, and the server
>        SHOULD allow that operation to succeed, regardless of what
>        permissions the object is created with.  For example, an empty
>        ACL denies all permissions, but the server should allow the
6930,6937c7428,7436
<        modifications to the ACL will happen.  The mode attribute, if
<        supported, MUST be as computed in Section 6.3.2, with the
<        MODE4_SUID, MODE4_SGID, and MODE4_SVTX bits clear.  If no
<        inheritable ACEs exist on the parent directory, the rules for
<        creating acl, dacl, or sacl attributes are implementation
<        defined.  If either the dacl or sacl attribute is supported, then
<        the ACL4_DEFAULTED flag SHOULD be set on the newly created
<        attributes.
---
> 
>           modifications to the ACL will happen.  The mode attribute, if
>           supported, MUST be as computed in Section 6.3.2, with the
>           MODE4_SUID, MODE4_SGID, and MODE4_SVTX bits clear.  If no
>           inheritable ACEs exist on the parent directory, the rules for
>           creating acl, dacl, or sacl attributes are implementation
>           defined.  If either the dacl or sacl attribute is supported,
>           then the ACL4_DEFAULTED flag SHOULD be set on the newly
>           created attributes.
6979,6981c7478,7479
<    const ACL4_AUTO_INHERIT         = 0x00000001;
<    const ACL4_PROTECTED            = 0x00000002;
<    const ACL4_DEFAULTED            = 0x00000004;
---
>    const ACL4_AUTO_INHERIT  = 0x00000001; const ACL4_PROTECTED =
>       0x00000002; const ACL4_DEFAULTED = 0x00000004;
7144,7150c7642,7649
<            /a              pseudo file system
<            /a/b            real file system
<            /a/b/c          pseudo file system
<            /a/b/c/d        real file system
<    Each of the pseudo file systems is considered a separate entity and
<    therefore MUST have its own fsid, unique among all the fsids for that
<    server.
---
>       /a pseudo file system /a/b real file system /a/b/c pseudo file
>       system /a/b/c/d real file system
> 
>       Each of the pseudo file systems is considered a separate entity
>       and
> 
>          therefore MUST have its own fsid, unique among all the fsids
>          for that server.
7187,7190c7686
<            /       fs1  (exported)
<            /a      fs2  (not exported)
<            /a/b    fs3  (exported)
< 
---
>       fs1 (exported) /a fs2 (not exported) /a/b fs3 (exported)
7206,7208c7702,7703
<            /               (place holder/not exported)
<            /a/b            (file system 1)
<            /a/b/c/d        (file system 2)
---
>       (place holder/not exported) /a/b (file system 1) /a/b/c/d (file
>       system 2)
7236,7245c7731,7741
<            /                           (place holder/not exported)
<            /a/b                        (file system 1)
<            /a/b/MySecretProject        (file system 2)
<    The /a/b/MySecretProject directory is a real file system and is the
<    shared resource.  Suppose the security policy for /a/b/
<    MySecretProject is Kerberos with integrity and it is desired to limit
<    knowledge of the existence of this file system.  In this case, the
<    server should apply the same security policy to /a/b.  This allows
<    for knowledge of the existence of a file system to be secured when
<    desirable.
---
>       (place holder/not exported) /a/b (file system 1) /a/b/
>       MySecretProject (file system 2)
>       The /a/b/MySecretProject directory is a real file system and is
>       the
> 
>          shared resource.  Suppose the security policy for /a/b/
>          MySecretProject is Kerberos with integrity and it is desired to
>          limit knowledge of the existence of this file system.  In this
>          case, the server should apply the same security policy to /a/b.
>          This allows for knowledge of the existence of a file system to
>          be secured when desirable.
7359,7372c7855,7865
<    o  Stateids may represent opens of files.
< 
<       Each stateid in this case represents the OPEN state for a given
<       client ID/open-owner/filehandle triple.  Such stateids are subject
<       to change (with consequent incrementing of the stateid's seqid) in
<       response to OPENs that result in upgrade and OPEN_DOWNGRADE
<       operations.
< 
<    o  Stateids may represent sets of byte-range locks.
< 
<       All locks held on a particular file by a particular owner and
<       gotten under the aegis of a particular open file are associated
<       with a single stateid with the seqid being incremented whenever
<       LOCK and LOCKU operations affect that set of locks.
---
>    o  Stateids may represent opens of files.  Each stateid in this case
>       represents the OPEN state for a given client ID/open-owner/
>       filehandle triple.  Such stateids are subject to change (with
>       consequent incrementing of the stateid's seqid) in response to
>       OPENs that result in upgrade and OPEN_DOWNGRADE operations.
> 
>    o  Stateids may represent sets of byte-range locks.  All locks held
>       on a particular file by a particular owner and gotten under the
>       aegis of a particular open file are associated with a single
>       stateid with the seqid being incremented whenever LOCK and LOCKU
>       operations affect that set of locks.
7381c7874,7875
<       particular filehandle.
---
> 
>          particular filehandle.
7388c7882,7883
<       particular directory filehandle.
---
> 
>          particular directory filehandle.
7398,7401c7893,7897
<       client for a particular filehandle with a given layout type.  The
<       seqid is updated as the layouts of that set of byte-ranges change,
<       via layout stateid changing operations such as LAYOUTGET and
<       LAYOUTRETURN.
---
> 
>          client for a particular filehandle with a given layout type.
>          The seqid is updated as the layouts of that set of byte-ranges
>          change, via layout stateid changing operations such as
>          LAYOUTGET and LAYOUTRETURN.
7790,7799c8286,8296
<       errors or it MUST ensure that, despite transport-level
<       retransmission intervals that exceed the lease_time, a SEQUENCE
<       operation is sent that renews the lease before expiration.  The
<       client can achieve this by associating a new connection with the
<       session, and sending a SEQUENCE operation on it.  However, if the
<       attempt to establish a new connection is delayed for some reason
<       (e.g., exponential backoff of the connection establishment
<       packets), the client will have to abort the connection
<       establishment attempt before the lease expires, and attempt to
<       reconnect.
---
> 
>          errors or it MUST ensure that, despite transport-level
>          retransmission intervals that exceed the lease_time, a SEQUENCE
>          operation is sent that renews the lease before expiration.  The
>          client can achieve this by associating a new connection with
>          the session, and sending a SEQUENCE operation on it.  However,
>          if the attempt to establish a new connection is delayed for
>          some reason (e.g., exponential backoff of the connection
>          establishment packets), the client will have to abort the
>          connection establishment attempt before the lease expires, and
>          attempt to reconnect.
8255c8752
<    1.   Client A acquires one or more locks.
---
>    1.  Client A acquires one or more locks.
8257c8754
<    2.   Server restarts.
---
>    2.  Server restarts.
8259,8261c8756,8758
<    3.   Client A and server experience mutual network partition, such
<         that client A is unable to reclaim all of its locks within the
<         grace period.
---
>    3.  Client A and server experience mutual network partition, such
>        that client A is unable to reclaim all of its locks within the
>        grace period.
8263,8264c8760,8761
<    4.   Server's reclaim grace period ends.  Client A has either no
<         locks or an incomplete set of locks known to the server.
---
>    4.  Server's reclaim grace period ends.  Client A has either no locks
>        or an incomplete set of locks known to the server.
8266,8267c8763,8764
<    5.   Client B acquires a lock that would have conflicted with a lock
<         of client A that was not reclaimed.
---
>    5.  Client B acquires a lock that would have conflicted with a lock
>        of client A that was not reclaimed.
8269c8766
<    6.   Client B releases the lock.
---
>    6.  Client B releases the lock.
8271c8768
<    7.   Server restarts a second time.
---
>    7.  Server restarts a second time.
8273c8770
<    8.   Network partition between client A and server heals.
---
>    8.  Network partition between client A and server heals.
8275,8276c8772,8773
<    9.   Client A connects to new server instance and finds out about
<         server restart.
---
>    9.  Client A connects to new server instance and finds out about
>        server restart.
8353,8355c8850,8853
<        there is unrecoverable damage or corruption to the information in
<        stable storage, then for all clients and/or locks that may be
<        affected, the server MUST return NFS4ERR_NO_GRACE.
---
> 
>           there is unrecoverable damage or corruption to the information
>           in stable storage, then for all clients and/or locks that may
>           be affected, the server MUST return NFS4ERR_NO_GRACE.
8886,8893c9384,9390
<    const OPEN4_SHARE_ACCESS_READ   = 0x00000001;
<    const OPEN4_SHARE_ACCESS_WRITE  = 0x00000002;
<    const OPEN4_SHARE_ACCESS_BOTH   = 0x00000003;
< 
<    const OPEN4_SHARE_DENY_NONE     = 0x00000000;
<    const OPEN4_SHARE_DENY_READ     = 0x00000001;
<    const OPEN4_SHARE_DENY_WRITE    = 0x00000002;
<    const OPEN4_SHARE_DENY_BOTH     = 0x00000003;
---
>    const OPEN4_SHARE_ACCESS_READ  = 0x00000001; const
>       OPEN4_SHARE_ACCESS_WRITE = 0x00000002; const
>       OPEN4_SHARE_ACCESS_BOTH = 0x00000003;
> 
>    const OPEN4_SHARE_DENY_NONE  = 0x00000000; const
>       OPEN4_SHARE_DENY_READ = 0x00000001; const OPEN4_SHARE_DENY_WRITE =
>       0x00000002; const OPEN4_SHARE_DENY_BOTH = 0x00000003;
9349,9359c9846,9857
<       modifications, some client implementors may be tempted to use the
<       time_modify attribute and not the change attribute to validate
<       cached data, so that metadata changes do not spuriously invalidate
<       clean data.  The implementor is cautioned in this approach.  The
<       change attribute is guaranteed to change for each update to the
<       file, whereas time_modify is guaranteed to change only at the
<       granularity of the time_delta attribute.  Use by the client's data
<       cache validation logic of time_modify and not change runs the risk
<       of the client incorrectly marking stale data as valid.  Thus, any
<       cache validation approach by the client MUST include the use of
<       the change attribute.
---
> 
>          modifications, some client implementors may be tempted to use
>          the time_modify attribute and not the change attribute to
>          validate cached data, so that metadata changes do not
>          spuriously invalidate clean data.  The implementor is cautioned
>          in this approach.  The change attribute is guaranteed to change
>          for each update to the file, whereas time_modify is guaranteed
>          to change only at the granularity of the time_delta attribute.
>          Use by the client's data cache validation logic of time_modify
>          and not change runs the risk of the client incorrectly marking
>          stale data as valid.  Thus, any cache validation approach by
>          the client MUST include the use of the change attribute.
9850d10347
< 
9881,9886c10378,10382
<       RENAME
<    Whether a RENAME of a directory in the path leading to the file
<    results in recall of an OPEN delegation depends on the semantics of
<    the server's file system.  If that file system denies such RENAMEs
<    when a file is open, the recall must be performed to determine
<    whether the file in question is, in fact, open.
---
>       RENAME Whether a RENAME of a directory in the path leading to the
>       file results in recall of an OPEN delegation depends on the
>       semantics of the server's file system.  If that file system denies
>       such RENAMEs when a file is open, the recall must be performed to
>       determine whether the file in question is, in fact, open.
11792c12288
<    -  Current fh is root of pseudo-fs.
---
>       *  Current fh is root of pseudo-fs.
11796,11798c12292,12294
<    -  Just for completeness.  Normally, clients will know the fsid of
<       the pseudo-fs as soon as they establish communication with a
<       server.
---
>       *  Just for completeness.  Normally, clients will know the fsid of
>          the pseudo-fs as soon as they establish communication with a
>          server.
11804,11806c12300,12302
<    -  Get current fsid to see where file system boundaries are.  The
<       fsid will be that for the pseudo-fs in this example, so no
<       boundary.
---
>       *  Get current fsid to see where file system boundaries are.  The
>          fsid will be that for the pseudo-fs in this example, so no
>          boundary.
11810c12306
<    -  Current fh is for /this and is within pseudo-fs.
---
>       *  Current fh is for /this and is within pseudo-fs.
11814c12310
<    -  Current fh is for /this/is and is within pseudo-fs.
---
>       *  Current fh is for /this/is and is within pseudo-fs.
11818,11820c12314,12316
<    -  Get current fsid to see where file system boundaries are.  The
<       fsid will be that for the pseudo-fs in this example, so no
<       boundary.
---
>       *  Get current fsid to see where file system boundaries are.  The
>          fsid will be that for the pseudo-fs in this example, so no
>          boundary.
11824c12320
<    -  Current fh is for /this/is and is within pseudo-fs.
---
>       *  Current fh is for /this/is and is within pseudo-fs.
11828c12324
<    -  Current fh is for /this/is/the and is within pseudo-fs.
---
>       *  Current fh is for /this/is/the and is within pseudo-fs.
11832,11834c12328,12330
<    -  Get current fsid to see where file system boundaries are.  The
<       fsid will be that for the pseudo-fs in this example, so no
<       boundary.
---
>       *  Get current fsid to see where file system boundaries are.  The
>          fsid will be that for the pseudo-fs in this example, so no
>          boundary.
11838c12334
<    -  Current fh is for /this/is/the and is within pseudo-fs.
---
>       *  Current fh is for /this/is/the and is within pseudo-fs.
11842,11843c12338,12339
<    -  Current fh is for /this/is/the/path and is within a new, absent
<       file system, but ...
---
>       *  Current fh is for /this/is/the/path and is within a new, absent
>          file system, but ...
11845c12341
<    -  The client will never see the value of that fh.
---
>       *  The client will never see the value of that fh.
11849,11873c12345,12372
<    -  We are getting the fsid to know where the file system boundaries
<       are.  In this operation, the fsid will be different than that of
<       the parent directory (which in turn was retrieved in OP10).  Note
<       that the fsid we are given will not necessarily be preserved at
<       the new location.  That fsid might be different, and in fact the
<       fsid we have for this file system might be a valid fsid of a
<       different file system on that new server.
< 
<    -  In this particular case, we are pretty sure anyway that what has
<       moved is /this/is/the/path rather than /this/is/the since we have
<       the fsid of the latter and it is that of the pseudo-fs, which
<       presumably cannot move.  However, in other examples, we might not
<       have this kind of information to rely on (e.g., /this/is/the might
<       be a non-pseudo file system separate from /this/is/the/path), so
<       we need to have other reliable source information on the boundary
<       of the file system that is moved.  If, for example, the file
<       system /this/is had moved, we would have a case of migration
<       rather than referral, and once the boundaries of the migrated file
<       system was clear we could fetch fs_locations_info.
< 
<    -  We are fetching fs_locations_info because the fact that we got an
<       NFS4ERR_MOVED at this point means that it is most likely that this
<       is a referral and we need the destination.  Even if it is the case
<       that /this/is/the is a file system that has migrated, we will
<       still need the location information for that file system.
---
>       *  We are getting the fsid to know where the file system
>          boundaries are.  In this operation, the fsid will be different
>          than that of the parent directory (which in turn was retrieved
>          in OP10).  Note that the fsid we are given will not necessarily
>          be preserved at the new location.  That fsid might be
>          different, and in fact the fsid we have for this file system
>          might be a valid fsid of a different file system on that new
>          server.
> 
>       *  In this particular case, we are pretty sure anyway that what
>          has moved is /this/is/the/path rather than /this/is/the since
>          we have the fsid of the latter and it is that of the pseudo-fs,
>          which presumably cannot move.  However, in other examples, we
>          might not have this kind of information to rely on (e.g.,
>          /this/is/the might be a non-pseudo file system separate from
>          /this/is/the/path), so we need to have other reliable source
>          information on the boundary of the file system that is moved.
>          If, for example, the file system /this/is had moved, we would
>          have a case of migration rather than referral, and once the
>          boundaries of the migrated file system was clear we could fetch
>          fs_locations_info.
> 
>       *  We are fetching fs_locations_info because the fact that we got
>          an NFS4ERR_MOVED at this point means that it is most likely
>          that this is a referral and we need the destination.  Even if
>          it is the case that /this/is/the is a file system that has
>          migrated, we will still need the location information for that
>          file system.
11877,11880c12376,12380
<    -  Fails because current fh is in an absent file system at the start
<       of the operation, and the specification makes no exception for
<       GETFH.  Note that this means the server will never send the client
<       a filehandle from within an absent file system.
---
>       *  Fails because current fh is in an absent file system at the
>          start of the operation, and the specification makes no
>          exception for GETFH.  Note that this means the server will
>          never send the client a filehandle from within an absent file
>          system.
12006,12007c12506
<       system)
<    o  fsid (value: unique value within referring server)
---
>       system) o fsid (value: unique value within referring server)
12232,12237c12731,12736
<     * Defines an individual server replica
<     */
<    struct  fs_locations_server4 {
<            int32_t         fls_currency;
<            opaque          fls_info<>;
<            utf8str_cis     fls_server;
---
> 
>     * Defines an individual server replica */
> 
>    struct  fs_locations_server4 { int32_t fls_currency; opaque
>     fls_info<>; utf8str_cis fls_server;
> 
12241,12257c12740,12749
<     * Byte indices of items within
<     * fls_info: flag fields, class numbers,
<     * bytes indicating ranks and orders.
<     */
<    const FSLI4BX_GFLAGS            = 0;
<    const FSLI4BX_TFLAGS            = 1;
<    const FSLI4BX_CLSIMUL           = 2;
<    const FSLI4BX_CLHANDLE          = 3;
<    const FSLI4BX_CLFILEID          = 4;
<    const FSLI4BX_CLWRITEVER        = 5;
<    const FSLI4BX_CLCHANGE          = 6;
<    const FSLI4BX_CLREADDIR         = 7;
< 
<    const FSLI4BX_READRANK          = 8;
<    const FSLI4BX_WRITERANK         = 9;
<    const FSLI4BX_READORDER         = 10;
<    const FSLI4BX_WRITEORDER        = 11;
---
> 
>     * Byte indices of items within * fls_info: flag fields, class
>     numbers, * bytes indicating ranks and orders.  */
>    const FSLI4BX_GFLAGS  = 0; const FSLI4BX_TFLAGS = 1; const
>     FSLI4BX_CLSIMUL = 2; const FSLI4BX_CLHANDLE = 3; const
>     FSLI4BX_CLFILEID = 4; const FSLI4BX_CLWRITEVER = 5; const
>     FSLI4BX_CLCHANGE = 6; const FSLI4BX_CLREADDIR = 7;
> 
>    const FSLI4BX_READRANK  = 8; const FSLI4BX_WRITERANK = 9; const
>     FSLI4BX_READORDER = 10; const FSLI4BX_WRITEORDER = 11;
12260,12270c12752,12760
<     * Bits defined within the general flag byte.
<     */
<    const FSLI4GF_WRITABLE          = 0x01;
<    const FSLI4GF_CUR_REQ           = 0x02;
<    const FSLI4GF_ABSENT            = 0x04;
<    const FSLI4GF_GOING             = 0x08;
<    const FSLI4GF_SPLIT             = 0x10;
<    /*
<     * Bits defined within the transport flag byte.
<     */
<    const FSLI4TF_RDMA              = 0x01;
---
> 
>     * Bits defined within the general flag byte.  */
> 
>    const FSLI4GF_WRITABLE  = 0x01; const FSLI4GF_CUR_REQ = 0x02; const
>     FSLI4GF_ABSENT = 0x04; const FSLI4GF_GOING = 0x08; const
>     FSLI4GF_SPLIT = 0x10; /* * Bits defined within the transport flag
>     byte.  */
> 
>    const FSLI4TF_RDMA  = 0x01;
12273,12280c12763,12769
<     * Defines a set of replicas sharing
<     * a common value of the rootpath
<     * with in the corresponding
<     * single-server namespaces.
<     */
<    struct  fs_locations_item4 {
<            fs_locations_server4    fli_entries<>;
<            pathname4               fli_rootpath;
---
> 
>     * Defines a set of replicas sharing * a common value of the rootpath
>     * with in the corresponding * single-server namespaces.  */
> 
>    struct  fs_locations_item4 { fs_locations_server4 fli_entries<>;
>     pathname4 fli_rootpath;
> 
12284,12291c12773,12780
<     * Defines the overall structure of
<     * the fs_locations_info attribute.
<     */
<    struct  fs_locations_info4 {
<            uint32_t                fli_flags;
<            int32_t                 fli_valid_for;
<            pathname4               fli_fs_root;
<            fs_locations_item4      fli_items<>;
---
> 
>     * Defines the overall structure of * the fs_locations_info
>     attribute.  */
> 
>    struct  fs_locations_info4 { uint32_t fli_flags; int32_t
>     fli_valid_for; pathname4 fli_fs_root; fs_locations_item4
>     fli_items<>;
> 
12295,12297c12784,12786
<     * Flag bits in fli_flags.
<     */
<    const FSLI4IF_VAR_SUB           = 0x00000001;
---
> 
>     * Flag bits in fli_flags.  */
>    const FSLI4IF_VAR_SUB  = 0x00000001;
12443,12448c12932,12938
<       system, a client might choose to transfer immediately to another
<       replica, or it may reference the current file system and only
<       transition when a migration event occurs.  Similarly, when this
<       flag appears as a replica in the referral, clients would likely
<       avoid being referred to this instance whenever there is another
<       choice.
---
> 
>          system, a client might choose to transfer immediately to
>          another replica, or it may reference the current file system
>          and only transition when a migration event occurs.  Similarly,
>          when this flag appears as a replica in the referral, clients
>          would likely avoid being referred to this instance whenever
>          there is another choice.
12462,12470c12952,12961
<       existing files with which it has continuing connection (it is free
<       to simply forget cached filehandles).  If the client remembers the
<       directory filehandle associated with each open file, it may
<       proceed upward using LOOKUPP to find the new file system
<       boundaries.  Note that in the event of a referral, there will not
<       be any such files and so these actions will not be performed.
<       Instead, a reference to a portion of the original file system now
<       split off into other file systems will encounter an fsid change
<       and possibly a further referral.
---
> 
>          existing files with which it has continuing connection (it is
>          free to simply forget cached filehandles).  If the client
>          remembers the directory filehandle associated with each open
>          file, it may proceed upward using LOOKUPP to find the new file
>          system boundaries.  Note that in the event of a referral, there
>          will not be any such files and so these actions will not be
>          performed.  Instead, a reference to a portion of the original
>          file system now split off into other file systems will
>          encounter an fsid change and possibly a further referral.
12473,12485c12964,12978
<       into two, it can prevent the disruption of running applications by
<       presenting the two file systems as a single one until a convenient
<       point to recognize the transition, such as a restart.  This would
<       require a mapping from the server's fsids to fsids as seen by the
<       client, but this is already necessary for other reasons.  As noted
<       above, existing fileids within the two descendant file systems
<       will not conflict.  Providing non-conflicting fileids for newly
<       created files on the split file systems is the responsibility of
<       the server (or servers working in concert).  The server can encode
<       filehandles such that filehandles generated before the split event
<       can be discerned from those generated after the split, allowing
<       the server to determine when the need for emulating two file
<       systems as one is over.
---
> 
>          into two, it can prevent the disruption of running applications
>          by presenting the two file systems as a single one until a
>          convenient point to recognize the transition, such as a
>          restart.  This would require a mapping from the server's fsids
>          to fsids as seen by the client, but this is already necessary
>          for other reasons.  As noted above, existing fileids within the
>          two descendant file systems will not conflict.  Providing non-
>          conflicting fileids for newly created files on the split file
>          systems is the responsibility of the server (or servers working
>          in concert).  The server can encode filehandles such that
>          filehandles generated before the split event can be discerned
>          from those generated after the split, allowing the server to
>          determine when the need for emulating two file systems as one
>          is over.
12488,12490c12981,12984
<       of referral, it would generally be of little interest to the
<       client, since the client is not expected to have information
<       regarding the current contents of the absent file system.
---
> 
>          of referral, it would generally be of little interest to the
>          client, since the client is not expected to have information
>          regarding the current contents of the absent file system.
13391a13886
> 
13879c14374,14375
<        returns NFS4ERR_RETURNCONFLICT.
---
> 
>           returns NFS4ERR_RETURNCONFLICT.
13919,13920c14415,14416
<    returned from CREATE_SESSION of the i'th session.  The reason for "-
<    1" is to allow for the required SEQUENCE operation.  The server MAY
---
>    returned from CREATE_SESSION of the i'th session.  The reason for
>    "-1" is to allow for the required SEQUENCE operation.  The server MAY
14228,14233c14724,14730
<       LAYOUTCOMMIT in reclaim mode, which the metadata server will
<       accept as long as it is in its grace period.  The use of
<       LAYOUTCOMMIT in reclaim mode informs the metadata server that the
<       layout has changed.  It is critical that the metadata server
<       receive this information before its grace period ends, and thus
<       before it starts allowing updates to the file system.
---
> 
>          LAYOUTCOMMIT in reclaim mode, which the metadata server will
>          accept as long as it is in its grace period.  The use of
>          LAYOUTCOMMIT in reclaim mode informs the metadata server that
>          the layout has changed.  It is critical that the metadata
>          server receive this information before its grace period ends,
>          and thus before it starts allowing updates to the file system.
14236,14240c14733,14738
<       loca_reclaim field of the operation's arguments (Section 18.42.1)
<       to TRUE.  During the metadata server's recovery grace period (and
<       only during the recovery grace period) the metadata server is
<       prepared to accept LAYOUTCOMMIT requests with the loca_reclaim
<       field set to TRUE.
---
> 
>          loca_reclaim field of the operation's arguments
>          (Section 18.42.1) to TRUE.  During the metadata server's
>          recovery grace period (and only during the recovery grace
>          period) the metadata server is prepared to accept LAYOUTCOMMIT
>          requests with the loca_reclaim field set to TRUE.
14243,14265c14741,14765
<       changes to the layout that occurred prior to the restart of the
<       metadata server.  The metadata server applies some consistency
<       checks on the loca_layoutupdate field of the arguments to
<       determine whether the client can commit the data written to the
<       storage device to the file system.  The loca_layoutupdate field is
<       of data type layoutupdate4 and contains layout-type-specific
<       content (in the lou_body field of loca_layoutupdate).  The layout-
<       type-specific information that loca_layoutupdate might have is
<       discussed in Section 12.5.4.3.  If the metadata server's
<       consistency checks on loca_layoutupdate succeed, then the metadata
<       server MUST commit the data (as described by the loca_offset,
<       loca_length, and loca_layoutupdate fields of the arguments) that
<       was written to the storage device.  If the metadata server's
<       consistency checks on loca_layoutupdate fail, the metadata server
<       rejects the LAYOUTCOMMIT operation and makes no changes to the
<       file system.  However, any time LAYOUTCOMMIT with loca_reclaim
<       TRUE fails, the pNFS client has lost all the data in the range
<       defined by <loca_offset, loca_length>.  A client can defend
<       against this risk by caching all data, whether written
<       synchronously or asynchronously in its memory, and by not
<       releasing the cached data until a successful LAYOUTCOMMIT.  This
<       condition does not hold true for all layout types; for example,
<       file-based storage devices need not suffer from this limitation.
---
> 
>          changes to the layout that occurred prior to the restart of the
>          metadata server.  The metadata server applies some consistency
>          checks on the loca_layoutupdate field of the arguments to
>          determine whether the client can commit the data written to the
>          storage device to the file system.  The loca_layoutupdate field
>          is of data type layoutupdate4 and contains layout-type-specific
>          content (in the lou_body field of loca_layoutupdate).  The
>          layout- type-specific information that loca_layoutupdate might
>          have is discussed in Section 12.5.4.3.  If the metadata
>          server's consistency checks on loca_layoutupdate succeed, then
>          the metadata server MUST commit the data (as described by the
>          loca_offset, loca_length, and loca_layoutupdate fields of the
>          arguments) that was written to the storage device.  If the
>          metadata server's consistency checks on loca_layoutupdate fail,
>          the metadata server rejects the LAYOUTCOMMIT operation and
>          makes no changes to the file system.  However, any time
>          LAYOUTCOMMIT with loca_reclaim TRUE fails, the pNFS client has
>          lost all the data in the range defined by <loca_offset,
>          loca_length>.  A client can defend against this risk by caching
>          all data, whether written synchronously or asynchronously in
>          its memory, and by not releasing the cached data until a
>          successful LAYOUTCOMMIT.  This condition does not hold true for
>          all layout types; for example, file-based storage devices need
>          not suffer from this limitation.
14396,14398c14896,14898
<    should examine the layout specification, such as the NFSv4.1/
<    file-based layout (Section 13) of this document, the blocks layout
<    [41], and objects layout [40].
---
>    should examine the layout specification, such as the NFSv4.1/ file-
>    based layout (Section 13) of this document, the blocks layout [41],
>    and objects layout [40].
14457,14458c14957,14958
<    client ID, the server SHOULD return with (EXCHGID4_FLAG_USE_PNFS_MDS
<    | EXCHGID4_FLAG_USE_PNFS_DS) set.
---
>    client ID, the server SHOULD return with
>    (EXCHGID4_FLAG_USE_PNFS_MDS | EXCHGID4_FLAG_USE_PNFS_DS) set.
14559a15060
> 
14582,14586c15083,15088
<    const NFL4_UFLG_MASK            = 0x0000003F;
<    const NFL4_UFLG_DENSE           = 0x00000001;
<    const NFL4_UFLG_COMMIT_THRU_MDS = 0x00000002;
<    const NFL4_UFLG_STRIPE_UNIT_SIZE_MASK
<                                    = 0xFFFFFFC0;
---
>    const NFL4_UFLG_MASK            = 0x0000003F; const NFL4_UFLG_DENSE =
>                                    0x00000001; const
>                                    NFL4_UFLG_COMMIT_THRU_MDS =
>                                    0x00000002; const
>                                    NFL4_UFLG_STRIPE_UNIT_SIZE_MASK =
>                                    0xFFFFFFC0;
14647,14649c15149,15151
<     * Encoded in the da_addr_body field of
<     * data type device_addr4:
<     */
---
> 
>     * Encoded in the da_addr_body field of * data type device_addr4: */
> 
14651,14652c15153,15156
<            uint32_t        nflda_stripe_indices<>;
<            multipath_list4 nflda_multipath_ds_list<>;
---
> 
>     uint32_t nflda_stripe_indices<>; multipath_list4
>     nflda_multipath_ds_list<>;
> 
14672,14682c15176,15186
<    /*
<     * Encoded in the loc_body field of
<     * data type layout_content4:
<     */
<    struct nfsv4_1_file_layout4 {
<             deviceid4      nfl_deviceid;
<             nfl_util4      nfl_util;
<             uint32_t       nfl_first_stripe_index;
<             offset4        nfl_pattern_offset;
<             nfs_fh4        nfl_fh_list<>;
<    };
---
>        /*
>         * Encoded in the loc_body field of * data type layout_content4:
>         */
> 
>        struct nfsv4_1_file_layout4 {
> 
>         deviceid4 nfl_deviceid; nfl_util4 nfl_util; uint32_t
>         nfl_first_stripe_index; offset4 nfl_pattern_offset; nfs_fh4
>         nfl_fh_list<>;
> 
>        };
14709,14711c15213,15216
<        to convert the client's logical I/O offset to an offset on the
<        file on the data server corresponding to the stripe unit number
<        (see Section 13.4.4).
---
> 
>           to convert the client's logical I/O offset to an offset on the
>           file on the data server corresponding to the stripe unit
>           number (see Section 13.4.4).
14714,14716c15219,15222
<        For example, via the LAYOUTGET operation, a client might request
<        a layout starting at offset 1000 of a file that has its striping
<        pattern start at offset zero.
---
> 
>           For example, via the LAYOUTGET operation, a client might
>           request a layout starting at offset 1000 of a file that has
>           its striping pattern start at offset zero.
14738c15244
<           See the discussion on sparse packing in Section 13.4.4.
---
>              See the discussion on sparse packing in Section 13.4.4.
14756,14760c15262,15267
<           by the presence of multiple objects of data type layout4
<           (either returned in one or multiple LAYOUTGET operations), and
<           a data server is the target of a unit of one pattern and
<           another unit of another pattern, then each reference to each
<           data server MUST use a different filehandle.
---
> 
>              by the presence of multiple objects of data type layout4
>              (either returned in one or multiple LAYOUTGET operations),
>              and a data server is the target of a unit of one pattern
>              and another unit of another pattern, then each reference to
>              each data server MUST use a different filehandle.
14800d15306
< 
14829c15335
<       nflda_multipath_ds_list[0] = { A, B, C, D }
---
>    nflda_multipath_ds_list[0] = { A, B, C, D }
14835c15341
<    Suppose the striping index array is:
---
>       Suppose the striping index array is:
14864c15370
<    and
---
>       and
14887a15394
>                     |     |            |              |
14936,14937c15443
<       nflda_multipath_ds_list[0] = { A, B, C, D }
< 
---
>    nflda_multipath_ds_list[0] = { A, B, C, D }
14940,14941c15446,15448
<       nflda_multipath_ds_list[2] = { F, G }
<    Suppose the striping index array is:
---
>    nflda_multipath_ds_list[2] = { F, G }
> 
>       Suppose the striping index array is:
14966c15473
<          idx = nflda_stripe_indices[j]
---
>    idx = nflda_stripe_indices[j]
14968c15475
<          = nflda_stripe_indices[3]
---
>       = nflda_stripe_indices[3]
14976c15483
<    and
---
>       and
14979d15485
< 
15003a15510
>                     |     |            |              |
15073d15579
< 
15277,15288c15783,15795
<       maintain the current NFSv4.1 commit and recovery model, the data
<       servers MUST return a common writeverf verifier in all WRITE
<       responses for a given file layout, and the metadata server's
<       COMMIT implementation must return the same writeverf.  The value
<       of the writeverf verifier MUST be changed at the metadata server
<       or any data server that is referenced in the layout, whenever
<       there is a server event that can possibly lead to loss of
<       uncommitted data.  The scope of the verifier can be for a file or
<       for the entire pNFS server.  It might be more difficult for the
<       server to maintain the verifier at the file level, but the benefit
<       is that only events that impact a given file will require recovery
<       action.
---
> 
>          maintain the current NFSv4.1 commit and recovery model, the
>          data servers MUST return a common writeverf verifier in all
>          WRITE responses for a given file layout, and the metadata
>          server's COMMIT implementation must return the same writeverf.
>          The value of the writeverf verifier MUST be changed at the
>          metadata server or any data server that is referenced in the
>          layout, whenever there is a server event that can possibly lead
>          to loss of uncommitted data.  The scope of the verifier can be
>          for a file or for the entire pNFS server.  It might be more
>          difficult for the server to maintain the verifier at the file
>          level, but the benefit is that only events that impact a given
>          file will require recovery action.
15757d16263
< 
15825d16330
<       Table C.6
15826a16332
>          Table C.6
15840,15841c16346,16347
<    const FSCHARSET_CAP4_CONTAINS_NON_UTF8  = 0x1;
<    const FSCHARSET_CAP4_ALLOWS_ONLY_UTF8   = 0x2;
---
>    const FSCHARSET_CAP4_CONTAINS_NON_UTF8  = 0x1; const FSCHARSET_CAP4_A
>       LLOWS_ONLY_UTF8 = 0x2;
15843c16349
<    typedef uint32_t        fs_charset_cap4;
---
>    typedef uint32_t  fs_charset_cap4;
15896c16402
<                         Protocol Error Definitions
---
>       Protocol Error Definitions
16003a16510
>     |                                   |        |                   |
16818,16820c17325,17326
<    o  The invalid operation: ILLEGAL.
< 
<               Valid Error Returns for Each Protocol Operation
---
>    o  The invalid operation: ILLEGAL.  Valid Error Returns for Each
>       Protocol Operation
17513a18020
>    |                      |                                            |
17525,17648c18032,18155
<          Valid Error Returns for Each Protocol Callback Operation
< 
<    +-------------------------+-----------------------------------------+
<    | Callback Operation      | Errors                                  |
<    +-------------------------+-----------------------------------------+
<    | CB_GETATTR              | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,           |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS,                   |
<    | CB_ILLEGAL              | NFS4ERR_BADXDR, NFS4ERR_OP_ILLEGAL      |
<    | CB_LAYOUTRECALL         | NFS4ERR_BADHANDLE, NFS4ERR_BADIOMODE,   |
<    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_STATEID,    |
<    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,           |
<    |                         | NFS4ERR_NOMATCHING_LAYOUT,              |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_TOO_MANY_OPS,                   |
<    |                         | NFS4ERR_UNKNOWN_LAYOUTTYPE,             |
<    |                         | NFS4ERR_WRONG_TYPE                      |
<    | CB_NOTIFY               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,     |
<    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,         |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_NOTIFY_DEVICEID      | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,         |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_NOTIFY_LOCK          | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,     |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_PUSH_DELEG           | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,           |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REJECT_DELEG,                   |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS,                   |
<    |                         | NFS4ERR_WRONG_TYPE                      |
<    | CB_RECALL               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,      |
<    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,     |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_RECALL_ANY           | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_INVAL,                          |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_RECALLABLE_OBJ_AVAIL | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,         |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_RECALL_SLOT          | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT,  |
<    |                         | NFS4ERR_DELAY,                          |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_SEQUENCE             | NFS4ERR_BADSESSION, NFS4ERR_BADSLOT,    |
<    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT,  |
<    |                         | NFS4ERR_CONN_NOT_BOUND_TO_SESSION,      |
<    |                         | NFS4ERR_DELAY, NFS4ERR_REP_TOO_BIG,     |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SEQUENCE_POS,                   |
<    |                         | NFS4ERR_SEQ_FALSE_RETRY,                |
<    |                         | NFS4ERR_SEQ_MISORDERED,                 |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    | CB_WANTS_CANCELLED      | NFS4ERR_BADXDR, NFS4ERR_DELAY,          |
<    |                         | NFS4ERR_NOTSUPP,                        |
<    |                         | NFS4ERR_OP_NOT_IN_SESSION,              |
<    |                         | NFS4ERR_REP_TOO_BIG,                    |
<    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,           |
<    |                         | NFS4ERR_REQ_TOO_BIG,                    |
<    |                         | NFS4ERR_RETRY_UNCACHED_REP,             |
<    |                         | NFS4ERR_SERVERFAULT,                    |
<    |                         | NFS4ERR_TOO_MANY_OPS                    |
<    +-------------------------+-----------------------------------------+
---
>       Valid Error Returns for Each Protocol Callback Operation
>    +-------------------------+----------------------------------------+
>    | Callback Operation      | Errors                                 |
>    +-------------------------+----------------------------------------+
>    | CB_GETATTR              | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,          |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS,                  |
>    | CB_ILLEGAL              | NFS4ERR_BADXDR, NFS4ERR_OP_ILLEGAL     |
>    | CB_LAYOUTRECALL         | NFS4ERR_BADHANDLE, NFS4ERR_BADIOMODE,  |
>    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_STATEID,   |
>    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,          |
>    |                         | NFS4ERR_NOMATCHING_LAYOUT,             |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_TOO_MANY_OPS,                  |
>    |                         | NFS4ERR_UNKNOWN_LAYOUTTYPE,            |
>    |                         | NFS4ERR_WRONG_TYPE                     |
>    | CB_NOTIFY               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,    |
>    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,        |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_NOTIFY_DEVICEID      | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,        |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_NOTIFY_LOCK          | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,    |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_PUSH_DELEG           | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_DELAY, NFS4ERR_INVAL,          |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REJECT_DELEG,                  |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS,                  |
>    |                         | NFS4ERR_WRONG_TYPE                     |
>    | CB_RECALL               | NFS4ERR_BADHANDLE, NFS4ERR_BADXDR,     |
>    |                         | NFS4ERR_BAD_STATEID, NFS4ERR_DELAY,    |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_RECALL_ANY           | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_INVAL,                         |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_RECALLABLE_OBJ_AVAIL | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_INVAL, NFS4ERR_NOTSUPP,        |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_RECALL_SLOT          | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT, |
>    |                         | NFS4ERR_DELAY,                         |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_SEQUENCE             | NFS4ERR_BADSESSION, NFS4ERR_BADSLOT,   |
>    |                         | NFS4ERR_BADXDR, NFS4ERR_BAD_HIGH_SLOT, |
>    |                         | NFS4ERR_CONN_NOT_BOUND_TO_SESSION,     |
>    |                         | NFS4ERR_DELAY, NFS4ERR_REP_TOO_BIG,    |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SEQUENCE_POS,                  |
>    |                         | NFS4ERR_SEQ_FALSE_RETRY,               |
>    |                         | NFS4ERR_SEQ_MISORDERED,                |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    | CB_WANTS_CANCELLED      | NFS4ERR_BADXDR, NFS4ERR_DELAY,         |
>    |                         | NFS4ERR_NOTSUPP,                       |
>    |                         | NFS4ERR_OP_NOT_IN_SESSION,             |
>    |                         | NFS4ERR_REP_TOO_BIG,                   |
>    |                         | NFS4ERR_REP_TOO_BIG_TO_CACHE,          |
>    |                         | NFS4ERR_REQ_TOO_BIG,                   |
>    |                         | NFS4ERR_RETRY_UNCACHED_REP,            |
>    |                         | NFS4ERR_SERVERFAULT,                   |
>    |                         | NFS4ERR_TOO_MANY_OPS                   |
>    |                         |                                        |
>    +-------------------------+----------------------------------------+
18250a18758
>    |                                   |                               |
18388d18895
< 
18436d18942
< 
18661,18668c19167,19168
<          PUTFH fh1              {fh1}
<          LOOKUP "compA"         {fh2}
<          GETATTR                {fh2}
<          LOOKUP "compB"         {fh3}
<          GETATTR                {fh3}
<          LOOKUP "compC"         {fh4}
<          GETATTR                {fh4}
<          GETFH
---
>       PUTFH fh1 {fh1} LOOKUP "compA" {fh2} GETATTR {fh2} LOOKUP "compB"
>       {fh3} GETATTR {fh3} LOOKUP "compC" {fh4} GETATTR {fh4} GETFH
18670,18675c19170,19179
<                                  Figure 2
<    In this example, the PUTFH (Section 18.19) operation explicitly sets
<    the current filehandle value while the result of each LOOKUP
<    operation sets the current filehandle value to the resultant file
<    system object.  Also, the client is able to insert GETATTR operations
<    using the current filehandle as an argument.
---
>          Figure 2
> 
>          In this example, the PUTFH (Section 18.19) operation explicitly
>           sets
> 
>             the current filehandle value while the result of each LOOKUP
>             operation sets the current filehandle value to the resultant
>             file system object.  Also, the client is able to insert
>             GETATTR operations using the current filehandle as an
>             argument.
18728c19232
<                                  Figure 3
---
>                                  Figure 2
18742c19246
<                                  Figure 4
---
>                                  Figure 3
18746,18747c19250,19251
<    operation.  This allows the client to explicitly surround a single
<    I/O operation with a lock and its appropriate stateid to guarantee
---
>    operation.  This allows the client to explicitly surround a single I/
>    O operation with a lock and its appropriate stateid to guarantee
18765,18769c19269,19272
<                                  Figure 5
<    The final example shows a disallowed use of the current stateid.  The
<    client is attempting to implicitly pass an anonymous special stateid,
<    (0,0), to the READ operation.  The server MUST return
<    NFS4ERR_BAD_STATEID in the reply to the READ operation.
---
>      Figure 4: The final example shows a disallowed use of the current
>     stateid.  The client is attempting to implicitly pass an anonymous
>       special stateid, (0,0), to the READ operation.  The server MUST
>       return NFS4ERR_BAD_STATEID in the reply to the READ operation.
18774c19277
<                                  Figure 6
---
>                                  Figure 5
18784c19287
<                           COMPOUND Error Returns
---
>       COMPOUND Error Returns
18786,18801c19289,19305
<    +------------------------------+------------------------------------+
<    | Error                        | Notes                              |
<    +------------------------------+------------------------------------+
<    | NFS4ERR_BADCHAR              | The tag argument has a character   |
<    |                              | the replier does not support.      |
<    | NFS4ERR_BADXDR               |                                    |
<    | NFS4ERR_DELAY                |                                    |
<    | NFS4ERR_INVAL                | The tag argument is not in UTF-8   |
<    |                              | encoding.                          |
<    | NFS4ERR_MINOR_VERS_MISMATCH  |                                    |
<    | NFS4ERR_SERVERFAULT          |                                    |
<    | NFS4ERR_TOO_MANY_OPS         |                                    |
<    | NFS4ERR_REP_TOO_BIG          |                                    |
<    | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                    |
<    | NFS4ERR_REQ_TOO_BIG          |                                    |
<    +------------------------------+------------------------------------+
---
>     +------------------------------+----------------------------------+
>     | Error                        | Notes                            |
>     +------------------------------+----------------------------------+
>     | NFS4ERR_BADCHAR              | The tag argument has a character |
>     |                              | the replier does not support.    |
>     | NFS4ERR_BADXDR               |                                  |
>     | NFS4ERR_DELAY                |                                  |
>     | NFS4ERR_INVAL                | The tag argument is not in UTF-8 |
>     |                              | encoding.                        |
>     | NFS4ERR_MINOR_VERS_MISMATCH  |                                  |
>     | NFS4ERR_SERVERFAULT          |                                  |
>     | NFS4ERR_TOO_MANY_OPS         |                                  |
>     | NFS4ERR_REP_TOO_BIG          |                                  |
>     | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                  |
>     | NFS4ERR_REQ_TOO_BIG          |                                  |
>     |                              |                                  |
>     +------------------------------+----------------------------------+
18859,18928c19363,19480
<    FDELG  File Delegations
<    DDELG  Directory Delegations
< 
<                                 Operations
< 
<    +----------------------+------------+--------------+----------------+
<    | Operation            | REQ, REC,  | Feature      | Definition     |
<    |                      | OPT, or    | (REQ, REC,   |                |
<    |                      | MNI        | or OPT)      |                |
<    +----------------------+------------+--------------+----------------+
<    | ACCESS               | REQ        |              | Section 18.1   |
<    | BACKCHANNEL_CTL      | REQ        |              | Section 18.33  |
<    | BIND_CONN_TO_SESSION | REQ        |              | Section 18.34  |
<    | CLOSE                | REQ        |              | Section 18.2   |
<    | COMMIT               | REQ        |              | Section 18.3   |
<    | CREATE               | REQ        |              | Section 18.4   |
<    | CREATE_SESSION       | REQ        |              | Section 18.36  |
<    | DELEGPURGE           | OPT        | FDELG (REQ)  | Section 18.5   |
<    | DELEGRETURN          | OPT        | FDELG,       | Section 18.6   |
<    |                      |            | DDELG, pNFS  |                |
<    |                      |            | (REQ)        |                |
<    | DESTROY_CLIENTID     | REQ        |              | Section 18.50  |
<    | DESTROY_SESSION      | REQ        |              | Section 18.37  |
<    | EXCHANGE_ID          | REQ        |              | Section 18.35  |
<    | FREE_STATEID         | REQ        |              | Section 18.38  |
<    | GETATTR              | REQ        |              | Section 18.7   |
<    | GETDEVICEINFO        | OPT        | pNFS (REQ)   | Section 18.40  |
<    | GETDEVICELIST        | OPT        | pNFS (OPT)   | Section 18.41  |
<    | GETFH                | REQ        |              | Section 18.8   |
<    | GET_DIR_DELEGATION   | OPT        | DDELG (REQ)  | Section 18.39  |
<    | LAYOUTCOMMIT         | OPT        | pNFS (REQ)   | Section 18.42  |
<    | LAYOUTGET            | OPT        | pNFS (REQ)   | Section 18.43  |
<    | LAYOUTRETURN         | OPT        | pNFS (REQ)   | Section 18.44  |
<    | LINK                 | OPT        |              | Section 18.9   |
<    | LOCK                 | REQ        |              | Section 18.10  |
<    | LOCKT                | REQ        |              | Section 18.11  |
<    | LOCKU                | REQ        |              | Section 18.12  |
<    | LOOKUP               | REQ        |              | Section 18.13  |
<    | LOOKUPP              | REQ        |              | Section 18.14  |
<    | NVERIFY              | REQ        |              | Section 18.15  |
<    | OPEN                 | REQ        |              | Section 18.16  |
<    | OPENATTR             | OPT        |              | Section 18.17  |
<    | OPEN_CONFIRM         | MNI        |              | N/A            |
<    | OPEN_DOWNGRADE       | REQ        |              | Section 18.18  |
<    | PUTFH                | REQ        |              | Section 18.19  |
<    | PUTPUBFH             | REQ        |              | Section 18.20  |
<    | PUTROOTFH            | REQ        |              | Section 18.21  |
<    | READ                 | REQ        |              | Section 18.22  |
<    | READDIR              | REQ        |              | Section 18.23  |
<    | READLINK             | OPT        |              | Section 18.24  |
<    | RECLAIM_COMPLETE     | REQ        |              | Section 18.51  |
<    | RELEASE_LOCKOWNER    | MNI        |              | N/A            |
<    | REMOVE               | REQ        |              | Section 18.25  |
<    | RENAME               | REQ        |              | Section 18.26  |
<    | RENEW                | MNI        |              | N/A            |
<    | RESTOREFH            | REQ        |              | Section 18.27  |
<    | SAVEFH               | REQ        |              | Section 18.28  |
<    | SECINFO              | REQ        |              | Section 18.29  |
<    | SECINFO_NO_NAME      | REC        | pNFS file    | Section 18.45, |
<    |                      |            | layout (REQ) | Section 13.12  |
<    | SEQUENCE             | REQ        |              | Section 18.46  |
<    | SETATTR              | REQ        |              | Section 18.30  |
<    | SETCLIENTID          | MNI        |              | N/A            |
<    | SETCLIENTID_CONFIRM  | MNI        |              | N/A            |
<    | SET_SSV              | REQ        |              | Section 18.47  |
<    | TEST_STATEID         | REQ        |              | Section 18.48  |
<    | VERIFY               | REQ        |              | Section 18.31  |
<    | WANT_DELEGATION      | OPT        | FDELG (OPT)  | Section 18.49  |
<    | WRITE                | REQ        |              | Section 18.32  |
<    +----------------------+------------+--------------+----------------+
---
>    FDELG  File Delegations DDELG Directory Delegations Operations
>    +----------------------+--------------+----------------+------------+
>    | Operation            | REQ, REC,    | Feature (REQ,  | Definition |
>    |                      | OPT, or MNI  | REC, or OPT)   |            |
>    +----------------------+--------------+----------------+------------+
>    | ACCESS               | REQ          |                | Section    |
>    |                      |              |                | 18.1       |
>    | BACKCHANNEL_CTL      | REQ          |                | Section    |
>    |                      |              |                | 18.33      |
>    | BIND_CONN_TO_SESSION | REQ          |                | Section    |
>    |                      |              |                | 18.34      |
>    | CLOSE                | REQ          |                | Section    |
>    |                      |              |                | 18.2       |
>    | COMMIT               | REQ          |                | Section    |
>    |                      |              |                | 18.3       |
>    | CREATE               | REQ          |                | Section    |
>    |                      |              |                | 18.4       |
>    | CREATE_SESSION       | REQ          |                | Section    |
>    |                      |              |                | 18.36      |
>    | DELEGPURGE           | OPT          | FDELG (REQ)    | Section    |
>    |                      |              |                | 18.5       |
>    | DELEGRETURN          | OPT          | FDELG,         | Section    |
>    |                      |              |                | 18.6       |
>    |                      |              | DDELG, pNFS    |            |
>    |                      |              | (REQ)          |            |
>    | DESTROY_CLIENTID     | REQ          |                | Section    |
>    |                      |              |                | 18.50      |
>    | DESTROY_SESSION      | REQ          |                | Section    |
>    |                      |              |                | 18.37      |
>    | EXCHANGE_ID          | REQ          |                | Section    |
>    |                      |              |                | 18.35      |
>    | FREE_STATEID         | REQ          |                | Section    |
>    |                      |              |                | 18.38      |
>    | GETATTR              | REQ          |                | Section    |
>    |                      |              |                | 18.7       |
>    | GETDEVICEINFO        | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.40      |
>    | GETDEVICELIST        | OPT          | pNFS (OPT)     | Section    |
>    |                      |              |                | 18.41      |
>    | GETFH                | REQ          |                | Section    |
>    |                      |              |                | 18.8       |
>    | GET_DIR_DELEGATION   | OPT          | DDELG (REQ)    | Section    |
>    |                      |              |                | 18.39      |
>    | LAYOUTCOMMIT         | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.42      |
>    | LAYOUTGET            | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.43      |
>    | LAYOUTRETURN         | OPT          | pNFS (REQ)     | Section    |
>    |                      |              |                | 18.44      |
>    | LINK                 | OPT          |                | Section    |
>    |                      |              |                | 18.9       |
>    | LOCK                 | REQ          |                | Section    |
>    |                      |              |                | 18.10      |
>    | LOCKT                | REQ          |                | Section    |
>    |                      |              |                | 18.11      |
>    | LOCKU                | REQ          |                | Section    |
>    |                      |              |                | 18.12      |
>    | LOOKUP               | REQ          |                | Section    |
>    |                      |              |                | 18.13      |
>    | LOOKUPP              | REQ          |                | Section    |
>    |                      |              |                | 18.14      |
>    | NVERIFY              | REQ          |                | Section    |
>    |                      |              |                | 18.15      |
>    | OPEN                 | REQ          |                | Section    |
>    |                      |              |                | 18.16      |
>    | OPENATTR             | OPT          |                | Section    |
>    |                      |              |                | 18.17      |
>    | OPEN_CONFIRM         | MNI          |                | N/A        |
>    | OPEN_DOWNGRADE       | REQ          |                | Section    |
>    |                      |              |                | 18.18      |
>    | PUTFH                | REQ          |                | Section    |
>    |                      |              |                | 18.19      |
>    | PUTPUBFH             | REQ          |                | Section    |
>    |                      |              |                | 18.20      |
>    | PUTROOTFH            | REQ          |                | Section    |
>    |                      |              |                | 18.21      |
>    | READ                 | REQ          |                | Section    |
>    |                      |              |                | 18.22      |
>    | READDIR              | REQ          |                | Section    |
>    |                      |              |                | 18.23      |
>    | READLINK             | OPT          |                | Section    |
>    |                      |              |                | 18.24      |
>    | RECLAIM_COMPLETE     | REQ          |                | Section    |
>    |                      |              |                | 18.51      |
>    | RELEASE_LOCKOWNER    | MNI          |                | N/A        |
>    | REMOVE               | REQ          |                | Section    |
>    |                      |              |                | 18.25      |
>    | RENAME               | REQ          |                | Section    |
>    |                      |              |                | 18.26      |
>    | RENEW                | MNI          |                | N/A        |
>    | RESTOREFH            | REQ          |                | Section    |
>    |                      |              |                | 18.27      |
>    | SAVEFH               | REQ          |                | Section    |
>    |                      |              |                | 18.28      |
>    | SECINFO              | REQ          |                | Section    |
>    |                      |              |                | 18.29      |
>    | SECINFO_NO_NAME      | REC          | pNFS file      | Section    |
>    |                      |              |                | 18.45,     |
>    |                      |              | layout (REQ)   | Section    |
>    |                      |              |                | 13.12      |
>    | SEQUENCE             | REQ          |                | Section    |
>    |                      |              |                | 18.46      |
>    | SETATTR              | REQ          |                | Section    |
>    |                      |              |                | 18.30      |
>    | SETCLIENTID          | MNI          |                | N/A        |
>    | SETCLIENTID_CONFIRM  | MNI          |                | N/A        |
>    | SET_SSV              | REQ          |                | Section    |
>    |                      |              |                | 18.47      |
>    | TEST_STATEID         | REQ          |                | Section    |
>    |                      |              |                | 18.48      |
>    | VERIFY               | REQ          |                | Section    |
>    |                      |              |                | 18.31      |
>    | WANT_DELEGATION      | OPT          | FDELG (OPT)    | Section    |
>    |                      |              |                | 18.49      |
>    | WRITE                | REQ          |                | Section    |
>    |                      |              |                | 18.32      |
>    |                      |              |                |            |
>    +----------------------+--------------+----------------+------------+
18931,18958c19483,19522
< 
<    +-------------------------+-----------+-------------+---------------+
<    | Operation               | REQ, REC, | Feature     | Definition    |
<    |                         | OPT, or   | (REQ, REC,  |               |
<    |                         | MNI       | or OPT)     |               |
<    +-------------------------+-----------+-------------+---------------+
<    | CB_GETATTR              | OPT       | FDELG (REQ) | Section 20.1  |
<    | CB_LAYOUTRECALL         | OPT       | pNFS (REQ)  | Section 20.3  |
<    | CB_NOTIFY               | OPT       | DDELG (REQ) | Section 20.4  |
<    | CB_NOTIFY_DEVICEID      | OPT       | pNFS (OPT)  | Section 20.12 |
<    | CB_NOTIFY_LOCK          | OPT       |             | Section 20.11 |
<    | CB_PUSH_DELEG           | OPT       | FDELG (OPT) | Section 20.5  |
<    | CB_RECALL               | OPT       | FDELG,      | Section 20.2  |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    | CB_RECALL_ANY           | OPT       | FDELG,      | Section 20.6  |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    | CB_RECALL_SLOT          | REQ       |             | Section 20.8  |
<    | CB_RECALLABLE_OBJ_AVAIL | OPT       | DDELG, pNFS | Section 20.7  |
<    |                         |           | (REQ)       |               |
<    | CB_SEQUENCE             | OPT       | FDELG,      | Section 20.9  |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    | CB_WANTS_CANCELLED      | OPT       | FDELG,      | Section 20.10 |
<    |                         |           | DDELG, pNFS |               |
<    |                         |           | (REQ)       |               |
<    +-------------------------+-----------+-------------+---------------+
---
>    +-------------------------+------------+---------------+------------+
>    | Operation               | REQ, REC,  | Feature (REQ, | Definition |
>    |                         | OPT, or    | REC, or OPT)  |            |
>    |                         | MNI        |               |            |
>    +-------------------------+------------+---------------+------------+
>    | CB_GETATTR              | OPT        | FDELG (REQ)   | Section    |
>    |                         |            |               | 20.1       |
>    | CB_LAYOUTRECALL         | OPT        | pNFS (REQ)    | Section    |
>    |                         |            |               | 20.3       |
>    | CB_NOTIFY               | OPT        | DDELG (REQ)   | Section    |
>    |                         |            |               | 20.4       |
>    | CB_NOTIFY_DEVICEID      | OPT        | pNFS (OPT)    | Section    |
>    |                         |            |               | 20.12      |
>    | CB_NOTIFY_LOCK          | OPT        |               | Section    |
>    |                         |            |               | 20.11      |
>    | CB_PUSH_DELEG           | OPT        | FDELG (OPT)   | Section    |
>    |                         |            |               | 20.5       |
>    | CB_RECALL               | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.2       |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    | CB_RECALL_ANY           | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.6       |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    | CB_RECALL_SLOT          | REQ        |               | Section    |
>    |                         |            |               | 20.8       |
>    | CB_RECALLABLE_OBJ_AVAIL | OPT        | DDELG, pNFS   | Section    |
>    |                         |            |               | 20.7       |
>    |                         |            | (REQ)         |            |
>    | CB_SEQUENCE             | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.9       |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    | CB_WANTS_CANCELLED      | OPT        | FDELG,        | Section    |
>    |                         |            |               | 20.10      |
>    |                         |            | DDELG, pNFS   |            |
>    |                         |            | (REQ)         |            |
>    |                         |            |               |            |
>    +-------------------------+------------+---------------+------------+
19721,19723c20285,20287
<       PUTFH (directory filehandle)
<       LOOKUP (entry name)
<       GETFH
---
>    PUTFH (directory filehandle)
> 
>       LOOKUP (entry name) GETFH
19848,19850c20412,20414
<     * For LOCK, transition from open_stateid and lock_owner
<     * to a lock stateid.
<     */
---
> 
>     * For LOCK, transition from open_stateid and lock_owner * to a lock
>     stateid.  */
19852,19855c20416,20419
<            seqid4          open_seqid;
<            stateid4        open_stateid;
<            seqid4          lock_seqid;
<            lock_owner4     lock_owner;
---
> 
>     seqid4 open_seqid; stateid4 open_stateid; seqid4 lock_seqid;
>     lock_owner4 lock_owner;
> 
19859,19861c20423,20426
<     * For LOCK, existing lock stateid continues to request new
<     * file lock for the same lock_owner and open_stateid.
<     */
---
> 
>     * For LOCK, existing lock stateid continues to request new * file
>     lock for the same lock_owner and open_stateid.  */
> 
19863,19864c20428,20430
<            stateid4        lock_stateid;
<            seqid4          lock_seqid;
---
> 
>     stateid4 lock_stateid; seqid4 lock_seqid;
> 
19866,19868c20432,20435
<    union locker4 switch (bool new_lock_owner) {
<     case TRUE:
<            open_to_lock_owner4     open_owner;
---
> 
>     union locker4 switch (bool new_lock_owner) { case TRUE:
>     open_to_lock_owner4 open_owner;
> 
19870c20437,20439
<            exist_lock_owner4       lock_owner;
---
> 
>            exist_lock_owner4 lock_owner;
> 
19874,19875c20443,20445
<     * LOCK/LOCKT/LOCKU: Record lock management
<     */
---
> 
>     * LOCK/LOCKT/LOCKU: Record lock management */
> 
19877,19882c20447,20450
<            /* CURRENT_FH: file */
<            nfs_lock_type4  locktype;
<            bool            reclaim;
<            offset4         offset;
<            length4         length;
<            locker4         locker;
---
> 
>     /* CURRENT_FH: file */ nfs_lock_type4 locktype; bool reclaim;
>     offset4 offset; length4 length; locker4 locker;
> 
20214,20221c20782,20783
<          PUTFH  (directory filehandle)
<          LOOKUP "pub"
<          GETFH
<          LOOKUP "foo"
<          GETFH
<          LOOKUP "bar"
<          GETFH
< 
---
>    PUTFH  (directory filehandle) LOOKUP "pub" GETFH LOOKUP "foo" GETFH
>       LOOKUP "bar" GETFH
20337,20340c20899,20901
<          SEQUENCE
<          PUTFH fh
<          NVERIFY attrbits attrs
<          READ 0 32767
---
>    SEQUENCE
> 
>       PUTFH fh NVERIFY attrbits attrs READ 0 32767
20434,20441c20995,21002
<    /* new flags for share_access field of OPEN4args */
<    const OPEN4_SHARE_ACCESS_WANT_DELEG_MASK        = 0xFF00;
<    const OPEN4_SHARE_ACCESS_WANT_NO_PREFERENCE     = 0x0000;
<    const OPEN4_SHARE_ACCESS_WANT_READ_DELEG        = 0x0100;
<    const OPEN4_SHARE_ACCESS_WANT_WRITE_DELEG       = 0x0200;
<    const OPEN4_SHARE_ACCESS_WANT_ANY_DELEG         = 0x0300;
<    const OPEN4_SHARE_ACCESS_WANT_NO_DELEG          = 0x0400;
<    const OPEN4_SHARE_ACCESS_WANT_CANCEL            = 0x0500;
---
>    /* new flags for share_access field of OPEN4args */ const
>    OPEN4_SHARE_ACCESS_WANT_DELEG_MASK = 0xFF00; const
>    OPEN4_SHARE_ACCESS_WANT_NO_PREFERENCE = 0x0000; const
>    OPEN4_SHARE_ACCESS_WANT_READ_DELEG = 0x0100; const
>    OPEN4_SHARE_ACCESS_WANT_WRITE_DELEG = 0x0200; const
>    OPEN4_SHARE_ACCESS_WANT_ANY_DELEG = 0x0300; const
>    OPEN4_SHARE_ACCESS_WANT_NO_DELEG = 0x0400; const
>    OPEN4_SHARE_ACCESS_WANT_CANCEL = 0x0500;
20457d21017
< 
20505a21066
> 
20638d21198
< 
20750c21310
<                    Required methods for exclusive create
---
>       Required methods for exclusive create
20752,20764c21312,21325
<    +----------------+-----------+---------------+----------------------+
<    | Persistent     | Server    | Server        | Client Allowed       |
<    | Reply Cache    | Supports  | REQUIRED      |                      |
<    | Enabled        | pNFS      |               |                      |
<    +----------------+-----------+---------------+----------------------+
<    | no             | no        | EXCLUSIVE4_1  | EXCLUSIVE4_1         |
<    |                |           | and           | (SHOULD) or          |
<    |                |           | EXCLUSIVE4    | EXCLUSIVE4 (SHOULD   |
<    |                |           |               | NOT)                 |
<    | no             | yes       | EXCLUSIVE4_1  | EXCLUSIVE4_1         |
<    | yes            | no        | GUARDED4      | GUARDED4             |
<    | yes            | yes       | GUARDED4      | GUARDED4             |
<    +----------------+-----------+---------------+----------------------+
---
>    +-------------------+----------------+--------------+---------------+
>    | Persistent Reply  | Server         | Server       | Client        |
>    | Cache Enabled     | Supports pNFS  | REQUIRED     | Allowed       |
>    +-------------------+----------------+--------------+---------------+
>    | no                | no             | EXCLUSIVE4_1 | EXCLUSIVE4_1  |
>    |                   |                | and          | (SHOULD) or   |
>    |                   |                | EXCLUSIVE4   | EXCLUSIVE4    |
>    |                   |                |              | (SHOULD       |
>    |                   |                |              | NOT)          |
>    | no                | yes            | EXCLUSIVE4_1 | EXCLUSIVE4_1  |
>    | yes               | no             | GUARDED4     | GUARDED4      |
>    | yes               | yes            | GUARDED4     | GUARDED4      |
>    |                   |                |              |               |
>    +-------------------+----------------+--------------+---------------+
20850a21412
>    |                      |                                            |
20958,20960c21520
<    OPEN4_SHARE_ACCESS_WANT_WRITE_DELEG
<    OPEN4_SHARE_ACCESS_WANT_ANY_DELEG
< 
---
>    OPEN4_SHARE_ACCESS_WANT_WRITE_DELEG OPEN4_SHARE_ACCESS_WANT_ANY_DELEG
21104c21664
<       acl (it is desirable for access control to be established at
---
>    acl (it is desirable for access control to be established at
21107c21667
<       dacl (ditto),
---
>    dacl (ditto),
21109c21669
<       mode (ditto),
---
>    mode (ditto),
21111c21671
<       owner (ditto),
---
>    owner (ditto),
21113c21673,21675
<       owner_group (ditto),
---
>    owner_group (ditto),
> 
>    retentevt_set (it may be desired to establish retention at
21115d21676
<       retentevt_set (it may be desired to establish retention at
21118c21679,21681
<       retention_hold (ditto),
---
>    retention_hold (ditto),
> 
>    retention_set (ditto),
21120c21683
<       retention_set (ditto),
---
>    sacl (it is desirable for auditing control to be established at
21122d21684
<       sacl (it is desirable for auditing control to be established at
21125c21687,21689
<       size (on some servers, size may have a limited range of values),
---
>    size (on some servers, size may have a limited range of values),
> 
>    mode_set_masked (as with mode),
21127c21691
<       mode_set_masked (as with mode),
---
>       and
21129c21693
<          and
---
>    time_creation (a meaningful file creation should be set when the
21131d21694
<       time_creation (a meaningful file creation should be set when the
21917a22481
> 
22206a22771
>    PUTFH (directory filehandle)
22208,22214c22773,22775
<          PUTFH (directory filehandle)
<          SAVEFH
<          GETATTR attrbits     (pre-op dir attrs)
<          CREATE optbits "foo" attrs
<          GETATTR attrbits     (file attributes)
<          RESTOREFH
<          GETATTR attrbits     (post-op dir attrs)
---
>       SAVEFH GETATTR attrbits (pre-op dir attrs) CREATE optbits "foo"
>       attrs GETATTR attrbits (file attributes) RESTOREFH GETATTR
>       attrbits (post-op dir attrs)
22405,22407c22966,22970
<       to reconstruct the parent of the original filehandle and the
<       component name of the original filehandle.  The introduction in
<       NFSv4.1 of SECINFO_NO_NAME obviates the need for reconstruction.
---
> 
>          to reconstruct the parent of the original filehandle and the
>          component name of the original filehandle.  The introduction in
>          NFSv4.1 of SECINFO_NO_NAME obviates the need for
>          reconstruction.
22581,22585c23144,23147
<          PUTFH (directory filehandle)
<          LOOKUP (file name)
<          VERIFY (filehandle == fh)
<          PUTFH (directory filehandle)
<          REMOVE (file name)
---
>    PUTFH (directory filehandle)
> 
>       LOOKUP (file name) VERIFY (filehandle == fh) PUTFH (directory
>       filehandle) REMOVE (file name)
22684,22685c23246,23248
<    Valid combinations of the fields stable in the request and committed
<                                in the reply.
---
>       Valid combinations of the fields stable in the request and
>       committed
>                                   in the reply.
22692a23256
>             |            |                                   |
22914a23479
> 
22918,22919c23483,23484
<      BIND_CONN_TO_SESSION4resok
<                    bctsr_resok4;
---
> 
>      BIND_CONN_TO_SESSION4resok bctsr_resok4;
23014a23580
> 
23182,23184c23748,23752
<       These properties may be updated by subsequent EXCHANGE_ID requests
<       on confirmed client IDs though the server MAY refuse to change
<       them.
---
>          These properties may be updated by subsequent EXCHANGE_ID
>          requests
> 
>             on confirmed client IDs though the server MAY refuse to
>             change them.
23201,23202c23769,23771
<       Once the client ID is confirmed, these properties cannot be
<       updated by subsequent EXCHANGE_ID requests.
---
>          Once the client ID is confirmed, these properties cannot be
> 
>             updated by subsequent EXCHANGE_ID requests.
23223,23248c23792,23818
<          length of the key of the encryption algorithm ("key length"),
<          the length of the output of hash algorithm ("hash length"), and
<          the length of the SSV ("SSV length").
< 
<          +  key length MUST be <= hash length.  This is because the keys
<             used for the encryption algorithm are actually subkeys
<             derived from the SSV, and the derivation is via the hash
<             algorithm.  The selection of an encryption algorithm with a
<             key length that exceeded the length of the output of the
<             hash algorithm would require padding, and thus weaken the
<             use of the encryption algorithm.
< 
<          +  hash length SHOULD be <= SSV length.  This is because the
<             SSV is a key used to derive subkeys via an HMAC, and it is
<             recommended that the key used as input to an HMAC be at
<             least as long as the length of the HMAC's hash algorithm's
<             output (see Section 3 of RFC2104 [11]).
< 
<          +  key length SHOULD be <= SSV length.  This is a transitive
<             result of the above two invariants.
< 
<          +  key length SHOULD be >= hash length / 2.  This is because
<             the subkey derivation is via an HMAC and it is recommended
<             that if the HMAC has to be truncated, it should not be
<             truncated to less than half the hash length (see Section 4
<             of RFC2104 [11]).
---
> 
>             length of the key of the encryption algorithm ("key
>             length"), the length of the output of hash algorithm ("hash
>             length"), and the length of the SSV ("SSV length").
> 
>             -  key length MUST be <= hash length.  This is because the
>                keys used for the encryption algorithm are actually
>                subkeys derived from the SSV, and the derivation is via
>                the hash algorithm.  The selection of an encryption
>                algorithm with a key length that exceeded the length of
>                the output of the hash algorithm would require padding,
>                and thus weaken the use of the encryption algorithm.
> 
>             -  hash length SHOULD be <= SSV length.  This is because the
>                SSV is a key used to derive subkeys via an HMAC, and it
>                is recommended that the key used as input to an HMAC be
>                at least as long as the length of the HMAC's hash
>                algorithm's output (see Section 3 of RFC2104 [11]).
> 
>             -  key length SHOULD be <= SSV length.  This is a transitive
>                result of the above two invariants.
> 
>             -  key length SHOULD be >= hash length / 2.  This is because
>                the subkey derivation is via an HMAC and it is
>                recommended that if the HMAC has to be truncated, it
>                should not be truncated to less than half the hash length
>                (see Section 4 of RFC2104 [11]).
23378,23383c23948,23954
<       with the client ID is unexpired, a subsequent EXCHANGE_ID
<       operation that uses the same eia_clientowner.co_owner as the first
<       EXCHANGE_ID MUST also use the same machine credential as the first
<       EXCHANGE_ID.  The server returns the same client ID for the
<       subsequent EXCHANGE_ID as that returned from the first
<       EXCHANGE_ID.
---
> 
>          with the client ID is unexpired, a subsequent EXCHANGE_ID
>          operation that uses the same eia_clientowner.co_owner as the
>          first EXCHANGE_ID MUST also use the same machine credential as
>          the first EXCHANGE_ID.  The server returns the same client ID
>          for the subsequent EXCHANGE_ID as that returned from the first
>          EXCHANGE_ID.
23514,23520c24085,24092
<       to a server sharing the same eir_server_owner.so_major_id, the
<       RPCSEC_GSS handles returned in spi_handles can only be used on
<       connections connected to a server that returns the same the
<       eir_server_owner.so_major_id and eir_server_owner.so_minor_id on
<       each connection.  It is permissible for the client to set
<       ssp_num_gss_handles to zero; the client can create more handles
<       with another EXCHANGE_ID call.
---
> 
>          to a server sharing the same eir_server_owner.so_major_id, the
>          RPCSEC_GSS handles returned in spi_handles can only be used on
>          connections connected to a server that returns the same the
>          eir_server_owner.so_major_id and eir_server_owner.so_minor_id
>          on each connection.  It is permissible for the client to set
>          ssp_num_gss_handles to zero; the client can create more handles
>          with another EXCHANGE_ID call.
23523,23524c24095,24097
<       context, there are security considerations specific to this
<       situation discussed in Section 2.10.10.
---
> 
>          context, there are security considerations specific to this
>          situation discussed in Section 2.10.10.
23527,23529c24100,24103
<       RPCSEC_GSS handle in spi_handle MUST be the same as the seq_window
<       of the RPCSEC_GSS handle used for the credential of the RPC
<       request that the EXCHANGE_ID request was sent with.
---
> 
>          RPCSEC_GSS handle in spi_handle MUST be the same as the
>          seq_window of the RPCSEC_GSS handle used for the credential of
>          the RPC request that the EXCHANGE_ID request was sent with.
23537a24112
>    |                   |                      |                        |
23571,23574c24146,24147
<    1.  co_ownerid
< 
<           The client identifier string, from the eia_clientowner
<           structure of the EXCHANGE_ID4args structure.
---
>    1.  co_ownerid The client identifier string, from the eia_clientowner
>        structure of the EXCHANGE_ID4args structure.
23576,23601c24149,24168
<    2.  co_verifier:
< 
<           A client-specific value used to indicate incarnations (where a
<           client restart represents a new incarnation), from the
<           eia_clientowner structure of the EXCHANGE_ID4args structure.
< 
<    3.  principal:
< 
<           The principal that was defined in the RPC header's credential
<           and/or verifier at the time the client record was established.
< 
<    4.  client ID:
< 
<           The shorthand client identifier, generated by the server and
<           returned via the eir_clientid field in the EXCHANGE_ID4resok
<           structure.
< 
<    5.  confirmed:
< 
<           A private field on the server indicating whether or not a
<           client record has been confirmed.  A client record is
<           confirmed if there has been a successful CREATE_SESSION
<           operation to confirm it.  Otherwise, it is unconfirmed.  An
<           unconfirmed record is established by an EXCHANGE_ID call.  Any
<           unconfirmed record that is not confirmed within a lease period
<           SHOULD be removed.
---
>    2.  co_verifier: A client-specific value used to indicate
>        incarnations (where a client restart represents a new
>        incarnation), from the eia_clientowner structure of the
>        EXCHANGE_ID4args structure.
> 
>    3.  principal: The principal that was defined in the RPC header's
>        credential and/or verifier at the time the client record was
>        established.
> 
>    4.  client ID: The shorthand client identifier, generated by the
>        server and returned via the eir_clientid field in the
>        EXCHANGE_ID4resok structure.
> 
>    5.  confirmed: A private field on the server indicating whether or
>        not a client record has been confirmed.  A client record is
>        confirmed if there has been a successful CREATE_SESSION operation
>        to confirm it.  Otherwise, it is unconfirmed.  An unconfirmed
>        record is established by an EXCHANGE_ID call.  Any unconfirmed
>        record that is not confirmed within a lease period SHOULD be
>        removed.
23665c24232,24237
<    1.  New Owner ID
---
>    1.  New Owner ID If the server has no client records with
>        eia_clientowner.co_ownerid matching ownerid_arg, and
>        EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set in the EXCHANGE_ID,
>        then a new shorthand client ID (let us call it clientid_ret) is
>        generated, and the following unconfirmed record is added to the
>        server's state.
23667,23672c24239
<           If the server has no client records with
<           eia_clientowner.co_ownerid matching ownerid_arg, and
<           EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set in the
<           EXCHANGE_ID, then a new shorthand client ID (let us call it
<           clientid_ret) is generated, and the following unconfirmed
<           record is added to the server's state.
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
23674d24240
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
23677c24243
<           Subsequently, the server returns clientid_ret.
---
>        Subsequently, the server returns clientid_ret.
23679a24246
>        If the server has the following confirmed record, and the
23681d24247
<           If the server has the following confirmed record, and the
23687c24253,24254
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
> 
23690c24257,24258
<           Since the record has been confirmed, the client must have
---
>        Since the record has been confirmed, the client must have
> 
23699c24267,24271
<    3.  Client Collision
---
>    3.  Client Collision If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set,
>        and if the server has the following confirmed record, then this
>        request is likely the result of a chance collision between the
>        values of the eia_clientowner.co_ownerid subfield of
>        EXCHANGE_ID4args for two different clients.
23701,23705c24273
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set, and if the
<           server has the following confirmed record, then this request
<           is likely the result of a chance collision between the values
<           of the eia_clientowner.co_ownerid subfield of EXCHANGE_ID4args
<           for two different clients.
---
>        { ownerid_arg, *, old_principal_arg, old_clientid_ret,
23707d24274
<           { ownerid_arg, *, old_principal_arg, old_clientid_ret,
23710c24277,24278
<           If there is currently no state associated with
---
>        If there is currently no state associated with
> 
23718c24286,24287
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
> 
23721c24290,24292
<           Subsequently, the server returns clientid_ret.
---
>        Subsequently, the server returns clientid_ret.
> 
>        If old_clientid_ret has an unexpired lease with state, then no
23723d24293
<           If old_clientid_ret has an unexpired lease with state, then no
23748,23750c24318,24320
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
<           unconfirmed }
<    5.  Client Restart
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
> 
>           unconfirmed } 5.  Client Restart
23797c24367,24369
<    6.  Update
---
>    5.  Update
> 
>        If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
23799d24370
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
23803c24374,24375
<           { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, principal_arg, clientid_ret,
> 
23806c24378,24379
<           Since the record has been confirmed, the client must have
---
>        Since the record has been confirmed, the client must have
> 
23811,23818c24384,24392
<    7.  Update but No Confirmed Record
< 
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
<           has no confirmed record corresponding ownerid_arg, then the
<           server returns NFS4ERR_NOENT and leaves any unconfirmed record
<           intact.
< 
<    8.  Update but Wrong Verifier
---
>    6.  Update but No Confirmed Record If
>        EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server has no
>        confirmed record corresponding ownerid_arg, then the server
>        returns NFS4ERR_NOENT and leaves any unconfirmed record intact.
> 
>    7.  Update but Wrong Verifier If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is
>        set, and the server has the following confirmed record, then this
>        request is an illegal attempt at an update, perhaps because of a
>        retry from a previous client incarnation.
23820,23823c24394
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
<           has the following confirmed record, then this request is an
<           illegal attempt at an update, perhaps because of a retry from
<           a previous client incarnation.
---
>        { ownerid_arg, old_verifier_arg, *, clientid_ret, confirmed }
23825c24396
<           { ownerid_arg, old_verifier_arg, *, clientid_ret, confirmed }
---
>        The server returns NFS4ERR_NOT_SAME and leaves the client
23827d24397
<           The server returns NFS4ERR_NOT_SAME and leaves the client
23830c24400,24402
<    9.  Update but Wrong Principal
---
>    8.  Update but Wrong Principal
> 
>        If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
23832d24403
<           If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server
23836c24407,24408
<           { ownerid_arg, verifier_arg, old_principal_arg, clientid_ret,
---
>        { ownerid_arg, verifier_arg, old_principal_arg, clientid_ret,
> 
23839c24411,24412
<           The server returns NFS4ERR_PERM and leaves the client record
---
>        The server returns NFS4ERR_PERM and leaves the client record
> 
23954,23956c24527,24530
<          in Section 12.5.2 it SHOULD support
<          CREATE_SESSION4_FLAG_PERSIST if it supports the layout_hint
<          (Section 5.12.4) attribute.
---
> 
>             in Section 12.5.2 it SHOULD support
>             CREATE_SESSION4_FLAG_PERSIST if it supports the layout_hint
>             (Section 5.12.4) attribute.
24010,24020c24584,24595
<          be sent.  This size represents the XDR encoded size of the
<          request, including the RPC headers (including security flavor
<          credentials and verifiers) but excludes any RPC transport
<          framing headers.  Imagine a request coming over a non-RDMA
<          TCP/IP connection, and that it has a single Record Marking
<          header preceding it.  The maximum allowable count encoded in
<          the header will be ca_maxrequestsize.  If a requester sends a
<          request that exceeds ca_maxrequestsize, the error
<          NFS4ERR_REQ_TOO_BIG will be returned per the description in
<          Section 2.10.6.4.  For each channel, the server MAY decrease
<          this value but MUST NOT increase it.
---
> 
>             be sent.  This size represents the XDR encoded size of the
>             request, including the RPC headers (including security
>             flavor credentials and verifiers) but excludes any RPC
>             transport framing headers.  Imagine a request coming over a
>             non-RDMA TCP/IP connection, and that it has a single Record
>             Marking header preceding it.  The maximum allowable count
>             encoded in the header will be ca_maxrequestsize.  If a
>             requester sends a request that exceeds ca_maxrequestsize,
>             the error NFS4ERR_REQ_TOO_BIG will be returned per the
>             description in Section 2.10.6.4.  For each channel, the
>             server MAY decrease this value but MUST NOT increase it.
24110,24114c24685,24690
<       of values of data type gsshandle4_t.  The data type gsshandle4_t
<       represents an RPCSEC_GSS handle, and is precisely the same as the
<       data type of the "handle" field of the rpc_gss_init_res data type
<       defined in Section 5.2.3.1, "Context Creation Response -
<       Successful Acceptance", of [4].
---
> 
>          of values of data type gsshandle4_t.  The data type
>          gsshandle4_t represents an RPCSEC_GSS handle, and is precisely
>          the same as the data type of the "handle" field of the
>          rpc_gss_init_res data type defined in Section 5.2.3.1, "Context
>          Creation Response -Successful Acceptance", of [4].
24117,24131c24693,24709
<       handle the server returned to the client (either in the handle
<       field of data type rpc_gss_init_res or as one of the elements of
<       the spi_handles field returned in the reply to EXCHANGE_ID) when
<       the RPCSEC_GSS context was created on the server.  The second
<       handle, gcbp_handle_from_client, is the back handle to which the
<       client will map the RPCSEC_GSS context.  The server can
<       immediately use the value of gcbp_handle_from_client in the
<       RPCSEC_GSS credential in callback RPCs.  That is, the value in
<       gcbp_handle_from_client can be used as the value of the field
<       "handle" in data type rpc_gss_cred_t (see Section 5, "Elements of
<       the RPCSEC_GSS Security Protocol", of [4]) in callback RPCs.  The
<       server MUST use the RPCSEC_GSS security service specified in
<       gcbp_service, i.e., it MUST set the "service" field of the
<       rpc_gss_cred_t data type in RPCSEC_GSS credential to the value of
<       gcbp_service (see Section 5.3.1, "RPC Request Header", of [4]).
---
> 
>          handle the server returned to the client (either in the handle
>          field of data type rpc_gss_init_res or as one of the elements
>          of the spi_handles field returned in the reply to EXCHANGE_ID)
>          when the RPCSEC_GSS context was created on the server.  The
>          second handle, gcbp_handle_from_client, is the back handle to
>          which the client will map the RPCSEC_GSS context.  The server
>          can immediately use the value of gcbp_handle_from_client in the
>          RPCSEC_GSS credential in callback RPCs.  That is, the value in
>          gcbp_handle_from_client can be used as the value of the field
>          "handle" in data type rpc_gss_cred_t (see Section 5, "Elements
>          of the RPCSEC_GSS Security Protocol", of [4]) in callback RPCs.
>          The server MUST use the RPCSEC_GSS security service specified
>          in gcbp_service, i.e., it MUST set the "service" field of the
>          rpc_gss_cred_t data type in RPCSEC_GSS credential to the value
>          of gcbp_service (see Section 5.3.1, "RPC Request Header", of
>          [4]).
24134,24135c24712,24714
<       does not exist on the server, the server will return
<       NFS4ERR_NOENT.
---
> 
>          does not exist on the server, the server will return
>          NFS4ERR_NOENT.
24138,24142c24717,24722
<       contexts MUST share the same GSS context and MUST have the same
<       seq_window (see Section 5.2.3.1 of RFC2203 [4]).  The fore and
<       back RPCSEC_GSS context state are independent of each other as far
<       as the RPCSEC_GSS sequence number (see the seq_num field in the
<       rpc_gss_cred_t data type of Sections 5 and 5.3.1 of [4]).
---
> 
>          contexts MUST share the same GSS context and MUST have the same
>          seq_window (see Section 5.2.3.1 of RFC2203 [4]).  The fore and
>          back RPCSEC_GSS context state are independent of each other as
>          far as the RPCSEC_GSS sequence number (see the seq_num field in
>          the rpc_gss_cred_t data type of Sections 5 and 5.3.1 of [4]).
24145,24147c24725,24728
<       Section 2.10.9), then because each SSV RPCSEC_GSS handle shares a
<       common SSV GSS context, there are security considerations specific
<       to this situation discussed in Section 2.10.10.
---
> 
>          Section 2.10.9), then because each SSV RPCSEC_GSS handle shares
>          a common SSV GSS context, there are security considerations
>          specific to this situation discussed in Section 2.10.10.
24159c24740,24741
<       clientid_arg: The value of the csa_clientid field of the
---
>    clientid_arg: The value of the csa_clientid field of the
> 
24240c24822,24824
<        *  Successful Confirmation
---
>        *  Successful Confirmation If the server has the following
>           unconfirmed record, then this is the expected confirmation of
>           an unconfirmed record.
24242,24243c24826
<              If the server has the following unconfirmed record, then
<              this is the expected confirmation of an unconfirmed record.
---
>           { ownerid, verifier, principal_arg, clientid_arg,
24245d24827
<              { ownerid, verifier, principal_arg, clientid_arg,
24248c24830,24831
<              As noted in Section 18.35.4, the server might also have the
---
>           As noted in Section 18.35.4, the server might also have the
> 
24251c24834,24835
<              { ownerid, old_verifier, principal_arg, old_clientid,
---
>           { ownerid, old_verifier, principal_arg, old_clientid,
> 
24254c24838
<              The server schedules the replacement of both records with:
---
>           The server schedules the replacement of both records with:
24256c24840
<              { ownerid, verifier, principal_arg, clientid_arg, confirmed
---
>           { ownerid, verifier, principal_arg, clientid_arg, confirmed
24259c24843,24844
<              The processing of CREATE_SESSION continues on to session
---
>           The processing of CREATE_SESSION continues on to session
> 
24267c24852,24853
<              If the server has the following record, then the client has
---
>           If the server has the following record, then the client has
> 
24272c24858,24860
<              { *, *, old_principal_arg, clientid_arg, * }
---
>           { *, *, old_principal_arg, clientid_arg, * }
> 
>           Neither of these cases is permissible.  Processing stops
24274d24861
<              Neither of these cases is permissible.  Processing stops
24284,24295c24871,24884
<        used (including whether the CREATE_SESSION4_FLAG_PERSIST flag is
<        set and has been accepted by the server) and allocating space for
<        the session reply cache (if there is not enough space, the server
<        returns NFS4ERR_NOSPC).  For each slot in the reply cache, the
<        server sets the sequence ID to zero, and records an entry
<        containing a COMPOUND reply with zero operations and the error
<        NFS4ERR_SEQ_MISORDERED.  This way, if the first SEQUENCE request
<        sent has a sequence ID equal to zero, the server can simply
<        return what is in the reply cache: NFS4ERR_SEQ_MISORDERED.  The
<        client initializes its reply cache for receiving callbacks in the
<        same way, and similarly, the first CB_SEQUENCE operation on a
<        slot after session creation MUST have a sequence ID of one.
---
> 
>           used (including whether the CREATE_SESSION4_FLAG_PERSIST flag
>           is set and has been accepted by the server) and allocating
>           space for the session reply cache (if there is not enough
>           space, the server returns NFS4ERR_NOSPC).  For each slot in
>           the reply cache, the server sets the sequence ID to zero, and
>           records an entry containing a COMPOUND reply with zero
>           operations and the error NFS4ERR_SEQ_MISORDERED.  This way, if
>           the first SEQUENCE request sent has a sequence ID equal to
>           zero, the server can simply return what is in the reply cache:
>           NFS4ERR_SEQ_MISORDERED.  The client initializes its reply
>           cache for receiving callbacks in the same way, and similarly,
>           the first CB_SEQUENCE operation on a slot after session
>           creation MUST have a sequence ID of one.
24298c24887,24889
<        associates the session with the client ID provided by the client.
---
> 
>           associates the session with the client ID provided by the
>           client.
24301,24306c24892,24898
<        to be retried, the retry MUST be done on a new connection that is
<        in non-RDMA mode.  If properties of the new connection are
<        different enough that the arguments to CREATE_SESSION need to
<        change, then a non-retry MUST be sent.  The server will
<        eventually dispose of any session that was created on the
<        original connection.
---
> 
>           to be retried, the retry MUST be done on a new connection that
>           is in non-RDMA mode.  If properties of the new connection are
>           different enough that the arguments to CREATE_SESSION need to
>           change, then a non-retry MUST be sent.  The server will
>           eventually dispose of any session that was created on the
>           original connection.
24731,24735c25323,25329
<       the client assumes the server is faulty and recovers by sending an
<       EXCHANGE_ID operation.  If GETDEVICEINFO indicates that the device
<       ID does exist, then while the server is faulty for sending an
<       erroneous device ID deletion notification, the degree to which it
<       is faulty does not require the client to create a new client ID.
---
> 
>          the client assumes the server is faulty and recovers by sending
>          an EXCHANGE_ID operation.  If GETDEVICEINFO indicates that the
>          device ID does exist, then while the server is faulty for
>          sending an erroneous device ID deletion notification, the
>          degree to which it is faulty does not require the client to
>          create a new client ID.
24738,24741c25332,25337
<       no harm is done.  The client should mark the device ID as deleted,
<       and when GETDEVICEINFO or GETDEVICELIST results are received that
<       indicate that the device ID has been in fact deleted, the device
<       ID should be removed from the client's cache.
---
> 
>          no harm is done.  The client should mark the device ID as
>          deleted, and when GETDEVICEINFO or GETDEVICELIST results are
>          received that indicate that the device ID has been in fact
>          deleted, the device ID should be removed from the client's
>          cache.
25086c25682,25684
<      NFS4_UINT64_MAX; a_off = loga_offset; a_minlen = loga_minlength.
---
> 
>          NFS4_UINT64_MAX; a_off = loga_offset; a_minlen =
>          loga_minlength.
25119c25717
<                                  Table 13
---
>       Table 13
25132c25730
<                            a_len = loga_length.
---
>     a_len = loga_length.
25165c25763
<                                  Table 14
---
>       Table 14
25366,25371c25964,25969
<    o  This strategy is as above, but the client is not using buffered
<       I/O, and instead all internal I/O requests are sent directly to
<       the server.  The LAYOUTGET request has loga_offset equal to 10000
<       and loga_minlength set to 50000.  The value of loga_length is set
<       to the length of the file.  The metadata server is free to return
<       a layout that fully overlaps the requested range, with a starting
---
>    o  This strategy is as above, but the client is not using buffered I/
>       O, and instead all internal I/O requests are sent directly to the
>       server.  The LAYOUTGET request has loga_offset equal to 10000 and
>       loga_minlength set to 50000.  The value of loga_length is set to
>       the length of the file.  The metadata server is free to return a
>       layout that fully overlaps the requested range, with a starting
25444,25448c26042,26044
<    /* Constants used for LAYOUTRETURN and CB_LAYOUTRECALL */
<    const LAYOUT4_RET_REC_FILE      = 1;
<    const LAYOUT4_RET_REC_FSID      = 2;
<    const LAYOUT4_RET_REC_ALL       = 3;
< 
---
>    /* Constants used for LAYOUTRETURN and CB_LAYOUTRECALL */ const
>    LAYOUT4_RET_REC_FILE = 1; const LAYOUT4_RET_REC_FSID = 2; const
>    LAYOUT4_RET_REC_ALL = 3;
25652,25653c26248,26249
<    /* CURRENT_FH: object or child directory */
<    typedef secinfo_style4 SECINFO_NO_NAME4args;
---
>    /* CURRENT_FH: object or child directory */ typedef secinfo_style4
>    SECINFO_NO_NAME4args;
25657,25658c26253,26254
<    /* CURRENTFH: consumed if status is NFS4_OK */
<    typedef SECINFO4res SECINFO_NO_NAME4res;
---
>    /* CURRENTFH: consumed if status is NFS4_OK */ typedef SECINFO4res
>    SECINFO_NO_NAME4res;
25797a26394
> 
25807a26405
> 
25826a26425
> 
25843a26443
> 
25852a26453
> 
25862a26464
> 
25869a26472
> 
25876a26480
> 
25887a26492
> 
25902a26508
> 
25910a26517
> 
25916a26524
> 
26526d27133
< 
26658c27265
<                          CB_COMPOUND error returns
---
>       CB_COMPOUND error returns
26660,26675c27267,27283
<    +------------------------------+------------------------------------+
<    | Error                        | Notes                              |
<    +------------------------------+------------------------------------+
<    | NFS4ERR_BADCHAR              | The tag argument has a character   |
<    |                              | the replier does not support.      |
<    | NFS4ERR_BADXDR               |                                    |
<    | NFS4ERR_DELAY                |                                    |
<    | NFS4ERR_INVAL                | The tag argument is not in UTF-8   |
<    |                              | encoding.                          |
<    | NFS4ERR_MINOR_VERS_MISMATCH  |                                    |
<    | NFS4ERR_SERVERFAULT          |                                    |
<    | NFS4ERR_TOO_MANY_OPS         |                                    |
<    | NFS4ERR_REP_TOO_BIG          |                                    |
<    | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                    |
<    | NFS4ERR_REQ_TOO_BIG          |                                    |
<    +------------------------------+------------------------------------+
---
>     +------------------------------+----------------------------------+
>     | Error                        | Notes                            |
>     +------------------------------+----------------------------------+
>     | NFS4ERR_BADCHAR              | The tag argument has a character |
>     |                              | the replier does not support.    |
>     | NFS4ERR_BADXDR               |                                  |
>     | NFS4ERR_DELAY                |                                  |
>     | NFS4ERR_INVAL                | The tag argument is not in UTF-8 |
>     |                              | encoding.                        |
>     | NFS4ERR_MINOR_VERS_MISMATCH  |                                  |
>     | NFS4ERR_SERVERFAULT          |                                  |
>     | NFS4ERR_TOO_MANY_OPS         |                                  |
>     | NFS4ERR_REP_TOO_BIG          |                                  |
>     | NFS4ERR_REP_TOO_BIG_TO_CACHE |                                  |
>     | NFS4ERR_REQ_TOO_BIG          |                                  |
>     |                              |                                  |
>     +------------------------------+----------------------------------+
26677c27285
<                                  Table 15
---
>                                  Table 13
26836,26838c27444,27447
<       client does not hold layouts for the file or if the client does
<       not have any overlapping layouts for the specification in the
<       layout recall.
---
> 
>          client does not hold layouts for the file or if the client does
>          not have any overlapping layouts for the specification in the
>          layout recall.
26854,26855c27463,27465
<       client does not hold layouts and does not have valid deviceid
<       mappings.
---
> 
>          client does not hold layouts and does not have valid deviceid
>          mappings.
26988d27597
< 
27059a27669
> 
27065a27676
> 
27076a27688
> 
27095a27708
> 
27148,27159c27761,27771
<    const RCA4_TYPE_MASK_RDATA_DLG          = 0;
<    const RCA4_TYPE_MASK_WDATA_DLG          = 1;
<    const RCA4_TYPE_MASK_DIR_DLG            = 2;
<    const RCA4_TYPE_MASK_FILE_LAYOUT        = 3;
<    const RCA4_TYPE_MASK_BLK_LAYOUT         = 4;
<    const RCA4_TYPE_MASK_OBJ_LAYOUT_MIN     = 8;
<    const RCA4_TYPE_MASK_OBJ_LAYOUT_MAX     = 9;
<    const RCA4_TYPE_MASK_OTHER_LAYOUT_MIN   = 12;
<    const RCA4_TYPE_MASK_OTHER_LAYOUT_MAX   = 15;
<    struct  CB_RECALL_ANY4args      {
<            uint32_t        craa_objects_to_keep;
<            bitmap4         craa_type_mask;
---
>    const RCA4_TYPE_MASK_RDATA_DLG  = 0; const RCA4_TYPE_MASK_WDATA_DLG =
>            1; const RCA4_TYPE_MASK_DIR_DLG = 2; const
>            RCA4_TYPE_MASK_FILE_LAYOUT = 3; const
>            RCA4_TYPE_MASK_BLK_LAYOUT = 4; const
>            RCA4_TYPE_MASK_OBJ_LAYOUT_MIN = 8; const
>            RCA4_TYPE_MASK_OBJ_LAYOUT_MAX = 9; const
>            RCA4_TYPE_MASK_OTHER_LAYOUT_MIN = 12; const
>            RCA4_TYPE_MASK_OTHER_LAYOUT_MAX = 15; struct
>            CB_RECALL_ANY4args { uint32_t craa_objects_to_keep; bitmap4
>            craa_type_mask;
> 
27222d27833
< 
27660a28272
> 
27670,27671c28282,28283
<       the new device-ID-to-device-address mappings before sending new
<       I/O requests to the storage devices addressed by the device ID.
---
>       the new device-ID-to-device-address mappings before sending new I/
>       O requests to the storage devices addressed by the device ID.
27673a28286
> 
27687,27690c28300,28304
<       The notification is encoded in a value of data type
<       notify_deviceid_delete4.  After a server deletes a device ID, it
<       MUST NOT reuse that device ID for the same layout type until the
<       client ID is deleted.
---
>          The notification is encoded in a value of data type
> 
>             notify_deviceid_delete4.  After a server deletes a device
>             ID, it MUST NOT reuse that device ID for the same layout
>             type until the client ID is deleted.
27696c28310
<            void;
---
>       void;
27701,27702c28315,28317
<     * CB_ILLEGAL: Response for illegal operation numbers
<     */
---
> 
>     * CB_ILLEGAL: Response for illegal operation numbers */
> 
27704c28319,28321
<            nfsstat4        status;
---
> 
>     nfsstat4 status;
> 
27872a28490
> 
27921a28540
>    |                         |       |         |     |                |
27924c28543
<            Table 16: Initial Device ID Notification Assignments
---
>            Table 14: Initial Device ID Notification Assignments
27988,28006c28607,28626
<    +-------------------------------+-------+--------+-----+------------+
<    | Recallable Object Type Name   | Value | RFC    | How | Minor      |
<    |                               |       |        |     | Versions   |
<    +-------------------------------+-------+--------+-----+------------+
<    | RCA4_TYPE_MASK_RDATA_DLG      | 0     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_WDATA_DLG      | 1     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_DIR_DLG        | 2     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_FILE_LAYOUT    | 3     | RFC    | N   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_BLK_LAYOUT     | 4     | RFC    | L   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_OBJ_LAYOUT_MIN | 8     | RFC    | L   | 1          |
<    |                               |       | 5661   |     |            |
<    | RCA4_TYPE_MASK_OBJ_LAYOUT_MAX | 9     | RFC    | L   | 1          |
<    |                               |       | 5661   |     |            |
<    +-------------------------------+-------+--------+-----+------------+
---
>    +-------------------------------+--------+------+------+------------+
>    | Recallable Object Type Name   | Value  | RFC  | How  | Minor      |
>    |                               |        |      |      | Versions   |
>    +-------------------------------+--------+------+------+------------+
>    | RCA4_TYPE_MASK_RDATA_DLG      | 0      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_WDATA_DLG      | 1      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_DIR_DLG        | 2      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_FILE_LAYOUT    | 3      | RFC  | N    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_BLK_LAYOUT     | 4      | RFC  | L    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_OBJ_LAYOUT_MIN | 8      | RFC  | L    | 1          |
>    |                               |        | 5661 |      |            |
>    | RCA4_TYPE_MASK_OBJ_LAYOUT_MAX | 9      | RFC  | L    | 1          |
>    |                               |        | 5661 |      |            |
>    |                               |        |      |      |            |
>    +-------------------------------+--------+------+------+------------+
28008c28628
<            Table 17: Initial Recallable Object Type Assignments
---
>            Table 15: Initial Recallable Object Type Assignments
28068a28689
>     |                       |       |          |     |                |
28071c28692
<                  Table 18: Initial Layout Type Assignments
---
>                  Table 16: Initial Layout Type Assignments
28214a28836
>          |                        |          |                  |
28217c28839
<                  Table 19: Initial List of Path Variables
---
>                  Table 17: Initial List of Path Variables
28311c28933
<    [4]   Eisler, M., Chiu, A., and L. Ling, "RPCSEC_GSS Protocol
---
>    [4]   Eisler, M., Chiu, A., and L.  Ling, "RPCSEC_GSS Protocol
28314c28936
<    [5]   Zhu, L., Jaganathan, K., and S. Hartman, "The Kerberos Version
---
>    [5]   Zhu, L., Jaganathan, K., and S.  Hartman, "The Kerberos Version
28326c28948
<    [8]   Talpey, T. and B. Callaghan, "Remote Direct Memory Access
---
>    [8]   Talpey, T. and B.  Callaghan, "Remote Direct Memory Access
28329c28951
<    [9]   Talpey, T. and B. Callaghan, "Network File System (NFS) Direct
---
>    [9]   Talpey, T. and B.  Callaghan, "Network File System (NFS) Direct
28332,28333c28954,28955
<    [10]  Recio, R., Metzler, B., Culley, P., Hilland, J., and D. Garcia,
<          "A Remote Direct Memory Access Protocol Specification",
---
>    [10]  Recio, R., Metzler, B., Culley, P., Hilland, J., and D.
>          Garcia, "A Remote Direct Memory Access Protocol Specification",
28336,28337c28958,28959
<    [11]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-Hashing
<          for Message Authentication", RFC 2104, February 1997.
---
>    [11]  Krawczyk, H., Bellare, M., and R.  Canetti, "HMAC: Keyed-
>          Hashing for Message Authentication", RFC 2104, February 1997.
28341,28343c28963,28965
<    [13]  Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed., "Network
<          File System (NFS) Version 4 Minor Version 1 External Data
<          Representation Standard (XDR) Description", RFC 5662,
---
>    [13]  Shepler, S., Ed., Eisler, M., Ed., and D.  Noveck, Ed.,
>          "Network File System (NFS) Version 4 Minor Version 1 External
>          Data Representation Standard (XDR) Description", RFC 5662,
28352,28353c28974,28975
<          (RPC) Network Identifiers and Universal Address Formats",
<          RFC 5665, January 2010.
---
>          (RPC) Network Identifiers and Universal Address Formats", RFC
>          5665, January 2010.
28370c28992
<    [19]  Hoffman, P. and M. Blanchet, "Preparation of Internationalized
---
>    [19]  Hoffman, P. and M.  Blanchet, "Preparation of Internationalized
28380,28381c29002,29003
<          - Part 1: Architecture and Basic Multilingual Plane",
<          ISO Standard 10646-1, May 1993.
---
>          - Part 1: Architecture and Basic Multilingual Plane", ISO
>          Standard 10646-1, May 1993.
28386,28388c29008,29010
<    [23]  Hoffman, P. and M. Blanchet, "Nameprep: A Stringprep Profile
<          for Internationalized Domain Names (IDN)", RFC 3491,
<          March 2003.
---
>    [23]  Hoffman, P. and M.  Blanchet, "Nameprep: A Stringprep Profile
>          for Internationalized Domain Names (IDN)", RFC 3491, March
>          2003.
28410,28413c29032,29036
<    [28]  Schaad, J., Kaliski, B., and R. Housley, "Additional Algorithms
<          and Identifiers for RSA Cryptography for use in the Internet
<          X.509 Public Key Infrastructure Certificate and Certificate
<          Revocation List (CRL) Profile", RFC 4055, June 2005.
---
>    [28]  Schaad, J., Kaliski, B., and R.  Housley, "Additional
>          Algorithms and Identifiers for RSA Cryptography for use in the
>          Internet X.509 Public Key Infrastructure Certificate and
>          Certificate Revocation List (CRL) Profile", RFC 4055, June
>          2005.
28416,28418c29039,29041
<          Algorithm Object Registration", URL http://csrc.nist.gov/
<          groups/ST/crypto_apps_infra/csor/algorithms.html,
<          November 2007.
---
>          Algorithm Object Registration", URL <http://csrc.nist.gov/>
>          groups/ST/crypto_apps_infra/csor/algorithms.html, November
>          2007.
28423c29046
<          C., Eisler, M., and D. Noveck, "Network File System (NFS)
---
>          C., Eisler, M., and D.  Noveck, "Network File System (NFS)
28426c29049
<    [31]  Callaghan, B., Pawlowski, B., and P. Staubach, "NFS Version 3
---
>    [31]  Callaghan, B., Pawlowski, B., and P.  Staubach, "NFS Version 3
28433,28434c29056,29057
<          the NFS Protocol's Use of RPCSEC_GSS and Kerberos V5",
<          RFC 2623, June 1999.
---
>          the NFS Protocol's Use of RPCSEC_GSS and Kerberos V5", RFC
>          2623, June 1999.
28442,28443c29065,29066
<    [36]  Srinivasan, R., "Binding Protocols for ONC RPC Version 2",
<          RFC 1833, August 1995.
---
>    [36]  Srinivasan, R., "Binding Protocols for ONC RPC Version 2", RFC
>          1833, August 1995.
28451c29074
<    [39]  Bhide, A., Elnozahy, E., and S. Morgan, "A Highly Available
---
>    [39]  Bhide, A., Elnozahy, E., and S.  Morgan, "A Highly Available
28454c29077
<    [40]  Halevy, B., Welch, B., and J. Zelenka, "Object-Based Parallel
---
>    [40]  Halevy, B., Welch, B., and J.  Zelenka, "Object-Based Parallel
28457c29080
<    [41]  Black, D., Glasgow, J., and S. Fridella, "Parallel NFS (pNFS)
---
>    [41]  Black, D., Glasgow, J., and S.  Fridella, "Parallel NFS (pNFS)
28460,28461c29083,29084
<    [42]  Callaghan, B., "WebNFS Client Specification", RFC 2054,
<          October 1996.
---
>    [42]  Callaghan, B., "WebNFS Client Specification", RFC 2054, October
>          1996.
28463,28464c29086,29087
<    [43]  Callaghan, B., "WebNFS Server Specification", RFC 2055,
<          October 1996.
---
>    [43]  Callaghan, B., "WebNFS Server Specification", RFC 2055, October
>          1996.
28466,28467c29089,29090
<    [44]  IESG, "IESG Processing of RFC Errata for the IETF Stream",
<          July 2008.
---
>    [44]  IESG, "IESG Processing of RFC Errata for the IETF Stream", July
>          2008.
28475c29098
<    [47]  Floyd, S. and V. Jacobson, "The Synchronization of Periodic
---
>    [47]  Floyd, S. and V.  Jacobson, "The Synchronization of Periodic
28490c29113
<    [51]  Carns, P., Ligon III, W., Ross, R., and R. Thakur, "PVFS: A
---
>    [51]  Carns, P., Ligon III, W., Ross, R., and R.  Thakur, "PVFS: A
28499c29122
<    [54]  Chiu, A., Eisler, M., and B. Callaghan, "Security Negotiation
---
>    [54]  Chiu, A., Eisler, M., and B.  Callaghan, "Security Negotiation
28502c29125
<    [55]  Narten, T. and H. Alvestrand, "Guidelines for Writing an IANA
---
>    [55]  Narten, T. and H.  Alvestrand, "Guidelines for Writing an IANA
28531c29154
<    parallel I/O. Garth Gibson and Peter Corbett started the pNFS effort
---
>    parallel I/O.  Garth Gibson and Peter Corbett started the pNFS effort
28611c29234
<    Finkelstein, Jason Goldschmidt, Vijay K. Gurbani, Sergey Klyushin,
---
>    Finkelstein, Jason Goldschmidt, Vijay K.  Gurbani, Sergey Klyushin,
28625c29248
<    EMail: shepler@storspeed.com
---
>    Email: shepler@storspeed.com
28634c29257
<    EMail: mike@eisler.com
---
>    Email: mike@eisler.com
28644c29267
<    EMail: dnoveck@netapp.com
---
>    Email: dnoveck@netapp.com
