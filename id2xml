#!/usr/bin/env python
# -*- coding: utf-8; mode: python; -*-
# Copyright The IETF Trust 2017, All Rights Reserved
from __future__ import print_function, unicode_literals


"""
NAME
	%(program)s - <short description>

SYNOPSIS
	%(program)s [OPTIONS] ARGS

DESCRIPTION
	<long description>

%(options)s

AUTHOR
	Written by Henrik Levkowetz, <henrik@levkowetz.com>

COPYRIGHT
        Copyright (c) 2008, The IETF Trust
        All rights reserved.

        Licenced under the 3-clause BSD license; see the file LICENSE
        for details.
"""

import sys, os.path, getopt, re

version = "0.10"
program = os.path.basename(sys.argv[0])
progdir = os.path.dirname(sys.argv[0])

# ----------------------------------------------------------------------
# Parse options

options = ""
for line in re.findall("\n +(if|elif) +opt in \[(.+)\]:\s+#(.+)\n", open(sys.argv[0]).read()):
    if not options:
        options += "OPTIONS\n"
    options += "        %-16s %s\n" % (line[1].replace('"', ''), line[2])
options = options.strip()

# with ' < 1:' on the next line, this is a no-op:
if len(sys.argv) <= 1:
    print(__doc__ % locals())
    sys.exit(1)

short_opt = "23hsvV"
long_opt  = ["help", "schema-v2", "schema-v3", "strip-only", "version","verbose",]

try:
    opts, files = getopt.gnu_getopt(sys.argv[1:], short_opt, long_opt)
except Exception as e:
    print("%s: %s" % (program, e))
    sys.exit(1)

# ----------------------------------------------------------------------
# Handle options

# set default values, if any
opt_verbose = False
opt_schema  = "v2"
opt_strip_only = False

# handle individual options
for opt, value in opts:
    if   opt in ["-h", "--help"]: # Output this help, then exit
        print(__doc__ % locals())
        sys.exit(1)
    elif opt in ["-2", "--schema-v2"]: # Use v2 schema
        opt_schema="v2"
    elif opt in ["-3", "--schema-v3"]: # Use v2 schema
        opt_schema="v3"
    elif opt in ["-v", "--version"]: # Output version information, then exit
        print(program, version)
        sys.exit(0)
    elif opt in ["-s", "--strip-only"]: # Don't convert, only strip headers/footers
        opt_strip_only = True
    elif opt in ["-V", "--verbose"]: # Output version information, then exit
        opt_verbose = True

# ----------------------------------------------------------------------
def say(s):
    sys.stderr.write("%s\n" % (s))

# ----------------------------------------------------------------------
def note(s):
    if opt_verbose:
        sys.stderr.write("%s\n" % (s))

# ----------------------------------------------------------------------
def die(s, error=1):
    sys.stderr.write("\n%s: Error: %s\n\n" % (program, s))
    sys.exit(error)

# ----------------------------------------------------------------------
# The program itself    

import id2xml
from pathlib import Path

for file in files:
    try:
        inf = Path(file)
        name = re.sub('-[0-9][0-9]', '', inf.stem)
        outf = inf.with_suffix('.xml')
        with inf.open() as file:
            txt = file.read()
        if opt_strip_only:
            lines, __ = id2xml.strip_pagebreaks(txt)
            sys.stdout.write('\n'.join([l.txt for l in lines]))
            sys.stdout.write('\n')
            continue
        parser = id2xml.DraftParser(inf.name, txt, schema=opt_schema)
        xml = parser.parse_to_xml()
        with outf.open('w') as out:
            out.write(xml)
    except Exception as e:
        sys.stderr.write("Failure converting %s to xml: %s\n" % (inf.name, e))
        raise
