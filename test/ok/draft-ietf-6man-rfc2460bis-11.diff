100,129c100,112
<       o  Expanded Addressing Capabilities
< 
<          IPv6 increases the IP address size from 32 bits to 128 bits, to
<          support more levels of addressing hierarchy, a much greater
<          number of addressable nodes, and simpler auto-configuration of
<          addresses.  The scalability of multicast routing is improved by
<          adding a "scope" field to multicast addresses.  And a new type
<          of address called an "anycast address" is defined, used to send
<          a packet to any one of a group of nodes.
< 
<       o  Header Format Simplification
< 
<          Some IPv4 header fields have been dropped or made optional, to
<          reduce the common-case processing cost of packet handling and
<          to limit the bandwidth cost of the IPv6 header.
< 
<       o  Improved Support for Extensions and Options
< 
<          Changes in the way IP header options are encoded allows for
<          more efficient forwarding, less stringent limits on the length
<          of options, and greater flexibility for introducing new options
<          in the future.
< 
<       o  Flow Labeling Capability
< 
<          A new capability is added to enable the labeling of sequences
<          of packets that the sender requests to be treated in the
<          network as a single flow.
< 
<       o  Authentication and Privacy Capabilities
---
>       *  Expanded Addressing Capabilities IPv6 increases the IP address
>          size from 32 bits to 128 bits, to support more levels of
>          addressing hierarchy, a much greater number of addressable
>          nodes, and simpler auto-configuration of addresses.  The
>          scalability of multicast routing is improved by adding a
>          "scope" field to multicast addresses.  And a new type of
>          address called an "anycast address" is defined, used to send a
>          packet to any one of a group of nodes.
> 
>       *  Header Format Simplification Some IPv4 header fields have been
>          dropped or made optional, to reduce the common-case processing
>          cost of packet handling and to limit the bandwidth cost of the
>          IPv6 header.
131,132c114,125
<          Extensions to support authentication, data integrity, and
<          (optional) data confidentiality are specified for IPv6.
---
>       *  Improved Support for Extensions and Options Changes in the way
>          IP header options are encoded allows for more efficient
>          forwarding, less stringent limits on the length of options, and
>          greater flexibility for introducing new options in the future.
> 
>       *  Flow Labeling Capability A new capability is added to enable
>          the labeling of sequences of packets that the sender requests
>          to be treated in the network as a single flow.
> 
>       *  Authentication and Privacy Capabilities Extensions to support
>          authentication, data integrity, and (optional) data
>          confidentiality are specified for IPv6.
152c145
<    node         a device that implements IPv6.
---
>    node  a device that implements IPv6.
154,155c147,148
<    router       a node that forwards IPv6 packets not explicitly
<                 addressed to itself.  [See Note below].
---
>    router  a node that forwards IPv6 packets not explicitly addressed to
>       itself.  [See Note below].
157c150
<    host         any node that is not a router.  [See Note below].
---
>    host any node that is not a router.  [See Note below].
222c215
<       Version             4-bit Internet Protocol version number = 6.
---
>       Version  4-bit Internet Protocol version number = 6.
224c217
<       Traffic Class       8-bit traffic class field.  See section 7.
---
>       Traffic Class  8-bit traffic class field.  See section 7.
226c219
<       Flow Label          20-bit flow label.  See section 6.
---
>       Flow Label  20-bit flow label.  See section 6.
228,233c221,236
<       Payload Length      16-bit unsigned integer.  Length of the IPv6
<                           payload, i.e., the rest of the packet
<                           following this IPv6 header, in octets.  (Note
<                           that any extension headers [Section 4] present
<                           are considered part of the payload, i.e.,
<                           included in the length count.)
---
>       Payload Length  16-bit unsigned integer.  Length of the IPv6
>          payload, i.e., the rest of the packet following this IPv6
>          header, in octets.  (Note that any extension headers
>          [Section 4] present are considered part of the payload, i.e.,
>          included in the length count.)
> 
>       Next Header  8-bit selector.  Identifies the type of header
>          immediately following the IPv6 header.  Uses the same values as
>          the IPv4 Protocol field [IANA-PN].
> 
>       Hop Limit  8-bit unsigned integer.  Decremented by 1 by each node
>          that forwards the packet.  When forwarding, the packet is
>          discarded if Hop Limit was zero when received or is decremented
>          to zero.  A node that is the destination of a packet should not
>          discard a packet with hop limit equal to zero, it should
>          process the packet normally.
235,250c238,239
<       Next Header         8-bit selector.  Identifies the type of header
<                           immediately following the IPv6 header.  Uses
<                           the same values as the IPv4 Protocol field
<                           [IANA-PN].
< 
<       Hop Limit           8-bit unsigned integer.  Decremented by 1 by
<                           each node that forwards the packet.  When
<                           forwarding, the packet is discarded if Hop
<                           Limit was zero when received or is decremented
<                           to zero.  A node that is the destination of a
<                           packet should not discard a packet with hop
<                           limit equal to zero, it should process the
<                           packet normally.
< 
<       Source Address      128-bit address of the originator of the
<                           packet.  See [RFC4291].
---
>       Source Address  128-bit address of the originator of the packet.
>          See [RFC4291].
253,255c242,244
<                           the packet (possibly not the ultimate
<                           recipient, if a Routing header is present).
<                           See [RFC4291] and section 4.4.
---
> 
>          the packet (possibly not the ultimate recipient, if a Routing
>          header is present).  See [RFC4291] and section 4.4.
264,265c253,254
<    Extension Headers are numbered from IANA IP Protocol Numbers
<    [IANA-PN], the same values used for IPv4 and IPv6.  When processing a
---
>    Extension Headers are numbered from IANA IP Protocol Numbers [IANA-
>    PN], the same values used for IPv4 and IPv6.  When processing a
288d276
< 
345,350c333,336
<       Hop-by-Hop Options
<       Fragment
<       Destination Options
<       Routing
<       Authentication
<       Encapsulating Security Payload
---
>    Hop-by-Hop Options
> 
>       Fragment Destination Options Routing Authentication Encapsulating
>       Security Payload
362,372c348,356
<       Hop-by-Hop Options header
<       Destination Options header (note 1)
<       Routing header
<       Fragment header
<       Authentication header (note 2)
<       Encapsulating Security Payload header (note 2)
<       Destination Options header (note 3)
<       upper-layer header
<       note 1: for options to be processed by the first destination that
<               appears in the IPv6 Destination Address field plus
<               subsequent destinations listed in the Routing header.
---
> 
>               Hop-by-Hop Options header Destination Options header (note
>               1) Routing header Fragment header Authentication header
>               (note 2) Encapsulating Security Payload header (note 2)
>               Destination Options header (note 3) upper-layer header
>               note 1: for options to be processed by the first
>               destination that appears in the IPv6 Destination Address
>               field plus subsequent destinations listed in the Routing
>               header.
374a359
> 
378a364
> 
412c398
<       Option Type         8-bit identifier of the type of option.
---
>       Option Type  8-bit identifier of the type of option.
414,415c400,401
<       Opt Data Len        8-bit unsigned integer.  Length of the Option
<                           Data field of this option, in octets.
---
>       Opt Data Len  8-bit unsigned integer.  Length of the Option Data
>          field of this option, in octets.
417,418c403
<       Option Data         Variable-length field.  Option-Type-specific
<                           data.
---
>       Option Data  Variable-length field.  Option-Type-specific data.
435,437c420,423
<            packet's Destination Address was a multicast address, send an
<            ICMP Parameter Problem, Code 2, message to the packet's
<            Source Address, pointing to the unrecognized Option Type.
---
> 
>          packet's Destination Address was a multicast address, send an
>          ICMP Parameter Problem, Code 2, message to the packet's Source
>          Address, pointing to the unrecognized Option Type.
440,442c426,429
<            Address was not a multicast address, send an ICMP Parameter
<            Problem, Code 2, message to the packet's Source Address,
<            pointing to the unrecognized Option Type.
---
> 
>          Address was not a multicast address, send an ICMP Parameter
>          Problem, Code 2, message to the packet's Source Address,
>          pointing to the unrecognized Option Type.
472,473c459,460
<       2n   means any 2-octet offset from the start of the header.
<       8n+2 means any 8-octet offset from the start of the header, plus 2
---
>       2n   means any 2-octet offset from the start of the header.  8n+2
>            means any 8-octet offset from the start of the header, plus 2
487,488c474,475
<       NOTE! the format of the Pad1 option is a special case -- it does
<             not have length and value fields.
---
>          NOTE! the format of the Pad1 option is a special case -- it
>          does not have length and value fields.
490,493c477,480
<       The Pad1 option is used to insert one octet of padding into the
<       Options area of a header.  If more than one octet of padding is
<       required, the PadN option, described next, should be used, rather
<       than multiple Pad1 options.
---
>          The Pad1 option is used to insert one octet of padding into the
>          Options area of a header.  If more than one octet of padding is
>          required, the PadN option, described next, should be used,
>          rather than multiple Pad1 options.
495c482
<    PadN option (alignment requirement: none)
---
>          PadN option (alignment requirement: none)
501c488
<       The PadN option is used to insert two or more octets of padding
---
>    The PadN option is used to insert two or more octets of padding
589c576,577
<       If Segments Left is zero, the node must ignore the Routing header
---
>    If Segments Left is zero, the node must ignore the Routing header
> 
593c581,582
<       If Segments Left is non-zero, the node must discard the packet and
---
>    If Segments Left is non-zero, the node must discard the packet and
> 
675c664,665
<       The Per-Fragment Headers must consist of the IPv6 header plus any
---
>    The Per-Fragment Headers must consist of the IPv6 header plus any
> 
681c671
<       The Extension Headers are all other extension headers that are not
---
>    The Extension Headers are all other extension headers that are not
687c677,678
<       Examples of upper-layer headers include TCP, UDP, IPv4, IPv6,
---
>    Examples of upper-layer headers include TCP, UDP, IPv4, IPv6,
> 
690c681,682
<       The Fragmentable Part consists of the rest of the packet after the
---
>    The Fragmentable Part consists of the rest of the packet after the
> 
713,716c705,710
<    +------------------+---------+-------------------+----------+
<    |  Per-Fragment    |Fragment | Ext & Upper-Layer |  first   |
<    |    Headers       | Header  |   Headers         | fragment |
<    +------------------+---------+-------------------+----------+
---
>    +------------------+--------------+-------------------+-------------+
>    | Per-Fragment     | Fragment     | Ext & Upper-Layer | first       |
>    | Headers          | Header       | Headers           | fragment    |
>    +------------------+--------------+-------------------+-------------+
>    |                  |              |                   |             |
>    +------------------+--------------+-------------------+-------------+
738c732,734
<       (2) A Fragment header containing:
---
>       (2) A Fragment header containing: The Next Header value that
>       identifies the first header after the Per-Fragment Headers of the
>       original packet.
740,741c736
<          The Next Header value that identifies the first header after
<          the Per-Fragment Headers of the original packet.
---
>       A Fragment Offset containing the offset of the fragment, in
743d737
<          A Fragment Offset containing the offset of the fragment, in
748c742
<          An M flag value of 1 as this is the first fragment.
---
>       An M flag value of 1 as this is the first fragment.
750c744
<          The Identification value generated for the original packet.
---
>       The Identification value generated for the original packet.
759c753
<    The subsequent fragment packets are composed of:
---
>       The subsequent fragment packets are composed of:
767c761,763
<       (2) A Fragment header containing:
---
>       (2) A Fragment header containing: The Next Header value that
>       identifies the first header after the Per-Fragment Headers of the
>       original packet.
769,770c765
<          The Next Header value that identifies the first header after
<          the Per-Fragment Headers of the original packet.
---
>       A Fragment Offset containing the offset of the fragment, in
772d766
<          A Fragment Offset containing the offset of the fragment, in
776c770,771
<          An M flag value of 0 if the fragment is the last ("rightmost")
---
>       An M flag value of 0 if the fragment is the last ("rightmost")
> 
779c774
<          The Identification value generated for the original packet.
---
>       The Identification value generated for the original packet.
798c793,794
<       An original packet is reassembled only from fragment packets that
---
>    An original packet is reassembled only from fragment packets that
> 
802c798
<       The Per-Fragment Headers of the reassembled packet consists of all
---
>    The Per-Fragment Headers of the reassembled packet consists of all
807c803,804
<          The Next Header field of the last header of the Per-Fragment
---
>       The Next Header field of the last header of the Per-Fragment
> 
811c808,809
<          The Payload Length of the reassembled packet is computed from
---
>       The Payload Length of the reassembled packet is computed from
> 
817c815,820
<             PL.orig = PL.first - FL.first - 8 + (8 * FO.last) + FL.last
---
>          PL.orig = PL.first - FL.first - 8 + (8 * FO.last) + FL.last
> 
>          where
> 
>             PL.orig = Payload Length field of reassembled packet.
>             PL.first = Payload Length field of first fragment packet.
819,828c822,828
<             where
<             PL.orig  =  Payload Length field of reassembled packet.
<             PL.first =  Payload Length field of first fragment packet.
< 
<             FL.first =  length of fragment following Fragment header of
<                         first fragment packet.
<             FO.last  =  Fragment Offset field of Fragment header of last
<                         fragment packet.
<             FL.last  =  length of fragment following Fragment header of
<                         last fragment packet.
---
>          FL.first =  length of fragment following Fragment header of
>             first fragment packet.  FO.last = Fragment Offset field of
>             Fragment header of last fragment packet.  FL.last = length
>             of fragment following Fragment header of last fragment
>             packet.
> 
>       The Fragmentable Part of the reassembled packet is constructed
830d829
<          The Fragmentable Part of the reassembled packet is constructed
838c837,838
<          The Fragment header is not present in the final, reassembled
---
>       The Fragment header is not present in the final, reassembled
> 
841c841,842
<          If the fragment is a whole datagram (that is, both the Fragment
---
>       If the fragment is a whole datagram (that is, both the Fragment
> 
853c854
<       o  If insufficient fragments are received to complete reassembly
---
>       *  If insufficient fragments are received to complete reassembly
862c863
<       o  If the length of a fragment, as derived from the fragment
---
>       *  If the length of a fragment, as derived from the fragment
869c870
<       o  If the length and offset of a fragment are such that the
---
>       *  If the length and offset of a fragment are such that the
876c877
<       o  If the first fragment does not include all headers through an
---
>       *  If the first fragment does not include all headers through an
881c882
<       o  If any of the fragments being reassembled overlaps with any
---
>       *  If any of the fragments being reassembled overlaps with any
888,891c889,893
<          network.  Instead of treating these exact duplicate fragments
<          as overlapping fragments, an implementation may choose to
<          detect this case and drop exact duplicate fragments while
<          keeping the other fragments belonging to the same packet.
---
>             network.  Instead of treating these exact duplicate
>             fragments as overlapping fragments, an implementation may
>             choose to detect this case and drop exact duplicate
>             fragments while keeping the other fragments belonging to the
>             same packet.
896c898,899
<       The number and content of the headers preceding the Fragment
---
>    The number and content of the headers preceding the Fragment
> 
904c907,908
<       The Next Header values in the Fragment headers of different
---
>    The Next Header values in the Fragment headers of different
> 
908c912,913
<       Other fields in the IPv6 header may also vary across the fragments
---
>    Other fields in the IPv6 header may also vary across the fragments
> 
959c964
<       o  If the desired action is for the destination node to discard
---
>       *  If the desired action is for the destination node to discard
969c974
<       o  If any other action is desired, the information must be encoded
---
>       *  If any other action is desired, the information must be encoded
1131c1136
<       o  If the IPv6 packet contains a Routing header, the Destination
---
>       *  If the IPv6 packet contains a Routing header, the Destination
1138c1143
<       o  The Next Header value in the pseudo-header identifies the
---
>       *  The Next Header value in the pseudo-header identifies the
1144c1149
<       o  The Upper-Layer Packet Length in the pseudo-header is the
---
>       *  The Upper-Layer Packet Length in the pseudo-header is the
1155c1160
<       o  Unlike IPv4, the default behavior when UDP packets are
---
>       *  Unlike IPv4, the default behavior when UDP packets are
1164c1169
<       o  As an exception to the default behaviour, protocols that use
---
>       *  As an exception to the default behaviour, protocols that use
1217c1222
<       o  Response packets that do not carry Routing headers.
---
>       *  Response packets that do not carry Routing headers.
1219c1224
<       o  Response packets that carry Routing headers that were NOT
---
>       *  Response packets that carry Routing headers that were NOT
1224c1229
<       o  Response packets that carry Routing headers that were derived
---
>       *  Response packets that carry Routing headers that were derived
1234c1239
<       o  Internet Protocol Version 6 (IPv6) Parameters [IANA-6P]
---
>       *  Internet Protocol Version 6 (IPv6) Parameters [IANA-6P]
1236c1241
<       o  Assigned Internet Protocol Numbers [IANA-PN]
---
>       *  Assigned Internet Protocol Numbers [IANA-PN]
1238c1243
<       o  ONC RPC Network Identifiers (netids) [IANA-NI]
---
>       *  ONC RPC Network Identifiers (netids) [IANA-NI]
1240c1245
<       o  Technical requirements for authoritative name servers [IANA-NS]
---
>       *  Technical requirements for authoritative name servers [IANA-NS]
1242,1243c1247,1249
<       o  Network Layer Protocol Identifiers (NLPIDs) of Interest
<          [IANA-NL]
---
>       *  Network Layer Protocol Identifiers (NLPIDs) of Interest [IANA-
>          NL]
>       *  Protocol Registries [IANA-PR]
1245,1247c1251
<       o  Protocol Registries [IANA-PR]
< 
<       o  Structure of Management Information (SMI) Numbers (MIB Module
---
>       *  Structure of Management Information (SMI) Numbers (MIB Module
1258c1262
<       o  Eavesdropping, On-path elements can observe the whole packet
---
>       *  Eavesdropping, On-path elements can observe the whole packet
1260c1264,1265
<       o  Replay, where attacker records a sequence of packets off of the
---
> 
>       *  Replay, where attacker records a sequence of packets off of the
1263c1268,1269
<       o  Packet insertion, where the attacker forges a packet with some
---
> 
>       *  Packet insertion, where the attacker forges a packet with some
1265c1271,1272
<       o  Packet deletion, where the attacker remove a packet from the
---
> 
>       *  Packet deletion, where the attacker remove a packet from the
1267c1274,1275
<       o  Packet modification, where the attacker removes a packet from
---
> 
>       *  Packet modification, where the attacker removes a packet from
1269c1277,1278
<       o  Man in the Middle attacks, where the attacker subverts the
---
> 
>       *  Man in the Middle attacks, where the attacker subverts the
1272c1281,1282
<       o  Denial of Service Attacks, where the attacker sends large
---
> 
>       *  Denial of Service Attacks, where the attacker sends large
1309c1319
<       o  Revised the text to handle the case of fragments that are whole
---
>       *  Revised the text to handle the case of fragments that are whole
1318c1328
<       o  Changed the text to require that IPv6 nodes must not create
---
>       *  Changed the text to require that IPv6 nodes must not create
1327,1329c1337,1339
<       0  Revised the text to require that all headers through the first
<          Upper-Layer Header are in the first fragment.  See [RFC6946]
<          for more information.
---
>          +  Revised the text to require that all headers through the
>             first Upper-Layer Header are in the first fragment.  See
>             [RFC6946] for more information.
1331c1341
<       o  Removed the paragraph in Section 5 that required including a
---
>       *  Removed the paragraph in Section 5 that required including a
1336c1346
<       o  Incorporated the updates from [RFC5095] and [RFC5871] to remove
---
>       *  Incorporated the updates from [RFC5095] and [RFC5871] to remove
1366,1367c1376,1377
<               10.17487/RFC0791, September 1981,
<               <http://www.rfc-editor.org/info/rfc791>.
---
>               10.17487/RFC0791, September 1981, <http://www.rfc-
>               editor.org/info/rfc791>.
1369c1379
<    [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,
---
>    [RFC2474]  Nichols, K., Blake, S., Baker, F., and D.  Black,
1372,1373c1382,1383
<               10.17487/RFC2474, December 1998,
<               <http://www.rfc-editor.org/info/rfc2474>.
---
>               10.17487/RFC2474, December 1998, <http://www.rfc-
>               editor.org/info/rfc2474>.
1375c1385
<    [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, "The Addition
---
>    [RFC3168]  Ramakrishnan, K., Floyd, S., and D.  Black, "The Addition
1380c1390
<    [RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing
---
>    [RFC4291]  Hinden, R. and S.  Deering, "IP Version 6 Addressing
1384c1394
<    [RFC4443]  Conta, A., Deering, S., and M. Gupta, Ed., "Internet
---
>    [RFC4443]  Conta, A., Deering, S., and M.  Gupta, Ed., "Internet
1387,1388c1397,1398
<               10.17487/RFC4443, March 2006,
<               <http://www.rfc-editor.org/info/rfc4443>.
---
>               10.17487/RFC4443, March 2006, <http://www.rfc-
>               editor.org/info/rfc4443>.
1390c1400
<    [RFC6437]  Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme,
---
>    [RFC6437]  Amante, S., Carpenter, B., Jiang, S., and J.  Rajahalme,
1392,1393c1402,1403
<               RFC6437, November 2011,
<               <http://www.rfc-editor.org/info/rfc6437>.
---
>               RFC6437, November 2011, <http://www.rfc-editor.org/info/
>               rfc6437>.
1406c1416
<               Module Registrations)", < http://www.iana.org/assignments/
---
>               Module Registrations)", <http://www.iana.org/assignments/
1410,1411c1420,1421
<               <http://www.iana.org/assignments/rpc-netids/
<               rpc-netids.xhtml>.
---
>               <http://www.iana.org/assignments/rpc-netids/rpc-
>               netids.xhtml>.
1433,1435c1443,1446
<    [RFC1981]  McCann, J., Deering, S., and J. Mogul, "Path MTU Discovery
<               for IP version 6", RFC 1981, DOI 10.17487/RFC1981, August
<               1996, <http://www.rfc-editor.org/info/rfc1981>.
---
>    [RFC1981]  McCann, J., Deering, S., and J.  Mogul, "Path MTU
>               Discovery for IP version 6", RFC 1981, DOI 10.17487/
>               RFC1981, August 1996, <http://www.rfc-editor.org/info/
>               rfc1981>.
1437c1448
<    [RFC2460]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
---
>    [RFC2460]  Deering, S. and R.  Hinden, "Internet Protocol, Version 6
1441c1452
<    [RFC4301]  Kent, S. and K. Seo, "Security Architecture for the
---
>    [RFC4301]  Kent, S. and K.  Seo, "Security Architecture for the
1446,1447c1457,1458
<               10.17487/RFC4302, December 2005,
<               <http://www.rfc-editor.org/info/rfc4302>.
---
>               10.17487/RFC4302, December 2005, <http://www.rfc-
>               editor.org/info/rfc4302>.
1453c1464
<    [RFC5095]  Abley, J., Savola, P., and G. Neville-Neil, "Deprecation
---
>    [RFC5095]  Abley, J., Savola, P., and G.  Neville-Neil, "Deprecation
1455,1456c1466,1467
<               10.17487/RFC5095, December 2007,
<               <http://www.rfc-editor.org/info/rfc5095>.
---
>               10.17487/RFC5095, December 2007, <http://www.rfc-
>               editor.org/info/rfc5095>.
1462c1473
<    [RFC5871]  Arkko, J. and S. Bradner, "IANA Allocation Guidelines for
---
>    [RFC5871]  Arkko, J. and S.  Bradner, "IANA Allocation Guidelines for
1466c1477
<    [RFC6936]  Fairhurst, G. and M. Westerlund, "Applicability Statement
---
>    [RFC6936]  Fairhurst, G. and M.  Westerlund, "Applicability Statement
1472,1473c1483,1484
<               6946, DOI 10.17487/RFC6946, May 2013,
<               <http://www.rfc-editor.org/info/rfc6946>.
---
>               6946, DOI 10.17487/RFC6946, May 2013, <http://www.rfc-
>               editor.org/info/rfc6946>.
1475c1486
<    [RFC7045]  Carpenter, B. and S. Jiang, "Transmission and Processing
---
>    [RFC7045]  Carpenter, B. and S.  Jiang, "Transmission and Processing
1477,1478c1488,1489
<               RFC7045, December 2013,
<               <http://www.rfc-editor.org/info/rfc7045>.
---
>               RFC7045, December 2013, <http://www.rfc-editor.org/info/
>               rfc7045>.
1480c1491
<    [RFC7112]  Gont, F., Manral, V., and R. Bonica, "Implications of
---
>    [RFC7112]  Gont, F., Manral, V., and R.  Bonica, "Implications of
1482,1483c1493,1494
<               RFC7112, January 2014,
<               <http://www.rfc-editor.org/info/rfc7112>.
---
>               RFC7112, January 2014, <http://www.rfc-editor.org/info/
>               rfc7112>.
1485c1496
<    [RFC7707]  Gont, F. and T. Chown, "Network Reconnaissance in IPv6
---
>    [RFC7707]  Gont, F. and T.  Chown, "Network Reconnaissance in IPv6
1489,1491c1500,1502
<    [RFC7721]  Cooper, A., Gont, F., and D. Thaler, "Security and Privacy
<               Considerations for IPv6 Address Generation Mechanisms",
<               RFC 7721, DOI 10.17487/RFC7721, March 2016,
---
>    [RFC7721]  Cooper, A., Gont, F., and D.  Thaler, "Security and
>               Privacy Considerations for IPv6 Address Generation
>               Mechanisms", RFC 7721, DOI 10.17487/RFC7721, March 2016,
1498c1509
<    [RFC8021]  Gont, F., Liu, W., and T. Anderson, "Generation of IPv6
---
>    [RFC8021]  Gont, F., Liu, W., and T.  Anderson, "Generation of IPv6
1500,1501c1511,1512
<               10.17487/RFC8021, January 2017,
<               <http://www.rfc-editor.org/info/rfc8021>.
---
>               10.17487/RFC8021, January 2017, <http://www.rfc-
>               editor.org/info/rfc8021>.
1510c1521
<       o  One desirable feature is that any multi-octet fields within the
---
>       *  One desirable feature is that any multi-octet fields within the
1516c1527
<       o  Another desirable feature is that the Hop-by-Hop or Destination
---
>       *  Another desirable feature is that the Hop-by-Hop or Destination
1521c1532
<       o  It may be assumed that, when either of the option-bearing
---
>       *  It may be assumed that, when either of the option-bearing
1562,1565c1573,1575
<    Example 2
<    If an option Y required three data fields, one of length 4 octets,
<    one of length 2 octets, and one of length 1 octet, it would be laid
<    out as follows:
---
>    Example 2 If an option Y required three data fields, one of length 4
>    octets, one of length 2 octets, and one of length 1 octet, it would
>    be laid out as follows:
1666c1676
<       -  Revised the text to handle the case of fragments that are whole
---
>       *  Revised the text to handle the case of fragments that are whole
1674c1684
<       -  Changed the text to require that IPv6 nodes must not create
---
>       *  Changed the text to require that IPv6 nodes must not create
1682c1692
<       -  Revised the text to require that all headers through the first
---
>       *  Revised the text to require that all headers through the first
1687c1697
<       -  Added text to Fragment Header process on handling exact
---
>       *  Added text to Fragment Header process on handling exact
1690c1700
<       -  Updated the Fragmentation header text to correct the inclusion
---
>       *  Updated the Fragmentation header text to correct the inclusion
1693c1703
<       -  Change terminology in Fragment header section from
---
>       *  Change terminology in Fragment header section from
1696c1706
<       -  Removed the paragraph in Section 5 that required including a
---
>       *  Removed the paragraph in Section 5 that required including a
1700c1710
<       -  Changed the text to clarify MTU restriction and 8-byte
---
>       *  Changed the text to clarify MTU restriction and 8-byte
1735c1745,1750
<    o  Changes to resolve the open Errata on RFC2460.  These are:
---
>    o  Changes to resolve the open Errata on RFC2460.  These are: Errata
>       ID: 2541: This errata notes that RFC2460 didn't update RFC2205
>       when the length of the Flow Label was changed from 24 to 20 bits
>       from RFC1883.  This issue was resolved in RFC6437 where the Flow
>       Label is defined.  This draft now references RFC6437.  No change
>       is required.
1737,1741c1752
<          Errata ID: 2541: This errata notes that RFC2460 didn't update
<          RFC2205 when the length of the Flow Label was changed from 24
<          to 20 bits from RFC1883.  This issue was resolved in RFC6437
<          where the Flow Label is defined.  This draft now references
<          RFC6437.  No change is required.
---
>       Errata ID: 4279: This errata noted that the specification
1743d1753
<          Errata ID: 4279: This errata noted that the specification
1748c1758,1759
<          Errata ID: 2843: This errata is marked rejected.  No change was
---
>       Errata ID: 2843: This errata is marked rejected.  No change was
> 
1755d1765
< 
1762,1766c1772,1776
<       11)  In Section 4.5 added clarification noting that some fields in
<            the IPv6 header may also vary across the fragments being
<            reassembled and that other specifications may provide
<            additional instructions for how they should be reassembled.
<            For example, Section 5.3 of [RFC3168].
---
>       11) In Section 4.5 added clarification noting that some fields in
>       the IPv6 header may also vary across the fragments being
>       reassembled and that other specifications may provide additional
>       instructions for how they should be reassembled.  For example,
>       Section 5.3 of [RFC3168].
1924c1934,1940
<            RFC7045, and RFC7112.  The changes include:
---
>            RFC7045, and RFC7112.  The changes include: RFC6564: Added
>            new Section 4.8 that describe recommendations for defining
>            new Extension headers and options RFC7045: The changes were
>            to add a reference to RFC7045, change the requirement for
>            processing the hop-by-hop option to a should, and added a
>            note that due to performance restrictions some nodes won't
>            process the Hop-by-Hop Option header.
1926,1934c1942
<               RFC6564: Added new Section 4.8 that describe
<               recommendations for defining new Extension headers and
<               options
< 
<               RFC7045: The changes were to add a reference to RFC7045,
<               change the requirement for processing the hop-by-hop
<               option to a should, and added a note that due to
<               performance restrictions some nodes won't process the Hop-
<               by-Hop Option header.
---
>            RFC7112: The changes were to revise the Fragmentation
1936d1943
<               RFC7112: The changes were to revise the Fragmentation
1945a1953
> 
1969c1977,1986
<            document to resolve the open Errata on RFC2460.
---
>            document to resolve the open Errata on RFC2460.  Errata ID:
>            2541: This errata notes that RFC2460 didn't update RFC2205
>            when the length of the Flow Label was changed from 24 to 20
>            bits from RFC1883.  This issue was resolved in RFC6437 where
>            the Flow Label is defined.  This draft now references
>            RFC6437.  No change is required.  Errata ID: 4279: This
>            errata noted that the specification doesn't handle the case
>            of a forwarding node receiving a packet with a zero Hop
>            Limit.  This is fixed in Section 3 of this draft.  Note: No
>            change was made regarding host behaviour.
1971,1981c1988
<               Errata ID: 2541: This errata notes that RFC2460 didn't
<               update RFC2205 when the length of the Flow Label was
<               changed from 24 to 20 bits from RFC1883.  This issue was
<               resolved in RFC6437 where the Flow Label is defined.  This
<               draft now references RFC6437.  No change is required.
< 
<               Errata ID: 4279: This errata noted that the specification
<               doesn't handle the case of a forwarding node receiving a
<               packet with a zero Hop Limit.  This is fixed in Section 3
<               of this draft.  Note: No change was made regarding host
<               behaviour.
---
>            Errata ID: 2843: This errata is marked rejected.  No
1983d1989
<               Errata ID: 2843: This errata is marked rejected.  No
