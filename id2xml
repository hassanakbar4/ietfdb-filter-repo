#!/usr/bin/env python
# -*- coding: utf-8; mode: python; -*-
# Copyright The IETF Trust 2017, All Rights Reserved
"""
NAME
	%(program)s - Convert text format RFCs and Internet-Drafts to .xml format

SYNOPSIS
	%(program)s [OPTIONS] ARGS

DESCRIPTION
        %(program)s reads text-format RFCs and IETF drafs which are reasonably
        well formatted (i.e., conforms to the text format produced by xml2rfc)
        and tries to generate a reasonably appropriate .xml file following the
        format accepted by xml2rfc, defined in RFC 7749 and its predecessors/
        successors

%(options)s

AUTHOR
	Written by Henrik Levkowetz, <henrik@levkowetz.com>

COPYRIGHT
        Copyright (c) 2008, The IETF Trust
        All rights reserved.

        Licenced under the 3-clause BSD license; see the file LICENSE
        for details.
"""

from __future__ import print_function, unicode_literals

import sys, os, getopt, re
from id2xml import wrap


version = "0.10"
program = os.path.basename(sys.argv[0])
progdir = os.path.dirname(sys.argv[0])

# ----------------------------------------------------------------------
# Parse options

options = ""
for line in re.findall("\n +(if|elif) +opt in \[(.+)\]:\s+#(.+)\n", open(sys.argv[0]).read()):
    if not options:
        options += "OPTIONS\n"
    options += "        %-24s %s\n" % (line[1].replace('"', ''), line[2])
options = options.strip()

# with ' < 1:' on the next line, this is a no-op:
if len(sys.argv) <= 1:
    print(__doc__ % locals())
    sys.exit(1)

short_opt = "23ho:p:svV"
long_opt  = ["help", "v2", "schema-v2", "v3", "schema-v3", "output-file-", "output-path=", "strip-only", "version","verbose",]

try:
    opts, files = getopt.gnu_getopt(sys.argv[1:], short_opt, long_opt)
except Exception as e:
    print("%s: %s" % (program, e))
    sys.exit(1)

# ----------------------------------------------------------------------
# Handle options

# set default values, if any
opt_verbose = False
opt_schema  = "v2"
opt_strip_only = False
opt_output_path = None
opt_output_file = None

# handle individual options
for opt, value in opts:
    if   opt in ["-h", "--help"]:               # Output this help, then exit
        print(__doc__ % locals())
        sys.exit(1)
    elif opt in ["-2", "--v2", "--schema-v2"]:  # Use v2 (RFC 7749) schema (default)
        opt_schema="v2"
#    elif opt in ["-3", "--v3", "--schema-v3"]:  # Use v2 (RFC 7991) schema
#        opt_schema="v3"
    elif opt in ["-o", "--output-file"]:        # Set the output file name
        opt_output_file = value
    elif opt in ["-p", "--output-path"]:        # Set the output directory name
        opt_output_path = value
    elif opt in ["-s", "--strip-only"]:         # Don't convert, only strip headers/footers
        opt_strip_only = True
    elif opt in ["-v", "--version"]:            # Output version information, then exit
        print(program, version)
        sys.exit(0)
    elif opt in ["-V", "--verbose"]:            # Be (slightly) more verbose
        opt_verbose = True

# ----------------------------------------------------------------------
def say(s):
    msg = "%s\n" % (s)
    sys.stderr.write(wrap(msg))

# ----------------------------------------------------------------------
def note(s):
    msg = "%s\n" % (s)
    if opt_verbose:
        sys.stderr.write(wrap(msg))

# ----------------------------------------------------------------------
def die(s, error=1):
    msg = "\n%s: Error:  %s\n\n" % (program, s)
    sys.stderr.write(wrap(msg))
    sys.exit(error)

# ----------------------------------------------------------------------
# The program itself    

import id2xml
from pathlib import Path
try:
    import debug
except ImportError:
    pass
    
if opt_output_path and opt_output_file:
    die("Mutually exclusive options -o / -p; use one or the other")

if opt_strip_only:
    output_suffix = '.raw'
else:
    output_suffix = '.xml'

for file in files:
    try:
        inf = Path(file)
        name = re.sub('-[0-9][0-9]', '', inf.stem)
        if opt_output_file:
            # This is not what we want if opt_output_file=='-', but we fix
            # that in the 'with' clause below
            outf = Path(opt_output_file)
        elif opt_output_path:
            outf = Path(opt_output_path) / (inf.stem+output_suffix)
        else:
            outf = inf.with_suffix(output_suffix)
            # if we're using an implicit output file name (derived from the
            # input file name), and we're not just stripping headers, refuse
            # to overwrite an existing file.  It could be the original xml
            # file provided by the authors.
            if not opt_strip_only and outf.exists():
                die("The implied output file (%s) already exists.  Provide an explicit "
                    "output filename (with -o) or a directory path (with -p) if you want "
                    "%s to overwrite an existing file." % (outf, program, ))
        with inf.open() as file:
            txt = file.read()
        if opt_strip_only:
            lines, __ = id2xml.strip_pagebreaks(txt)
            with (sys.stdout if opt_output_file=='-' else outf.open('w')) as out:
                out.write('\n'.join([l.txt for l in lines]))
                out.write('\n')
            note('Wrote stripped file to %s' % out.name)
        else:
            parser = id2xml.DraftParser(inf.name, txt, schema=opt_schema)
            xml = parser.parse_to_xml()
            with (sys.stdout if opt_output_file=='-' else outf.open('w')) as out:
                out.write(xml)
            note('Wrote converted file to %s' % out.name)
    except Exception as e:
        sys.stderr.write("Failure converting %s: %s\n" % (inf.name, e))
        raise
